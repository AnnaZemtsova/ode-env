// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_e2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* E2Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E2Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* E2State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E2State_reflection_ = NULL;
const ::google::protobuf::Descriptor* E2State_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E2State_Particles_reflection_ = NULL;
const ::google::protobuf::Descriptor* E2PetscSolverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E2PetscSolverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E2Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E2Model_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fe2_2eproto() {
  protobuf_AddDesc_model_5fe2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_e2.proto");
  GOOGLE_CHECK(file != NULL);
  E2Config_descriptor_ = file->message_type(0);
  static const int E2Config_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, f_),
  };
  E2Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E2Config_descriptor_,
      E2Config::default_instance_,
      E2Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E2Config));
  E2State_descriptor_ = file->message_type(1);
  static const int E2State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State, simulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State, particles_),
  };
  E2State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E2State_descriptor_,
      E2State::default_instance_,
      E2State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E2State));
  E2State_Particles_descriptor_ = E2State_descriptor_->nested_type(0);
  static const int E2State_Particles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State_Particles, ksi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State_Particles, v_),
  };
  E2State_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E2State_Particles_descriptor_,
      E2State_Particles::default_instance_,
      E2State_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2State_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E2State_Particles));
  E2PetscSolverConfig_descriptor_ = file->message_type(2);
  static const int E2PetscSolverConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2PetscSolverConfig, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2PetscSolverConfig, init_step_),
  };
  E2PetscSolverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E2PetscSolverConfig_descriptor_,
      E2PetscSolverConfig::default_instance_,
      E2PetscSolverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2PetscSolverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2PetscSolverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E2PetscSolverConfig));
  E2Model_descriptor_ = file->message_type(3);
  static const int E2Model_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, pconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, sconfig_),
  };
  E2Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E2Model_descriptor_,
      E2Model::default_instance_,
      E2Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E2Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E2Model));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fe2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E2Config_descriptor_, &E2Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E2State_descriptor_, &E2State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E2State_Particles_descriptor_, &E2State_Particles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E2PetscSolverConfig_descriptor_, &E2PetscSolverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E2Model_descriptor_, &E2Model::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fe2_2eproto() {
  delete E2Config::default_instance_;
  delete E2Config_reflection_;
  delete E2State::default_instance_;
  delete E2State_reflection_;
  delete E2State_Particles::default_instance_;
  delete E2State_Particles_reflection_;
  delete E2PetscSolverConfig::default_instance_;
  delete E2PetscSolverConfig_reflection_;
  delete E2Model::default_instance_;
  delete E2Model_reflection_;
}

void protobuf_AddDesc_model_5fe2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016model_e2.proto\022\002pb\":\n\010E2Config\022\t\n\001N\030\001 "
    "\002(\r\022\t\n\001A\030\002 \001(\001\022\r\n\005delta\030\003 \001(\001\022\t\n\001f\030\004 \001(\001"
    "\"k\n\007E2State\022\021\n\tsimulated\030\001 \001(\010\022(\n\tpartic"
    "les\030\002 \003(\n2\025.pb.E2State.Particles\032#\n\tPart"
    "icles\022\013\n\003ksi\030\003 \002(\001\022\t\n\001v\030\004 \002(\001\";\n\023E2Petsc"
    "SolverConfig\022\021\n\ttolerance\030\001 \001(\001\022\021\n\tinit_"
    "step\030\002 \001(\001\"\213\001\n\007E2Model\022\014\n\004time\030\004 \002(\001\022\r\n\005"
    "steps\030\005 \002(\r\022\035\n\007pconfig\030\001 \002(\0132\014.pb.E2Conf"
    "ig\022\032\n\005state\030\002 \002(\0132\013.pb.E2State\022(\n\007sconfi"
    "g\030\003 \002(\0132\027.pb.E2PetscSolverConfig", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_e2.proto", &protobuf_RegisterTypes);
  E2Config::default_instance_ = new E2Config();
  E2State::default_instance_ = new E2State();
  E2State_Particles::default_instance_ = new E2State_Particles();
  E2PetscSolverConfig::default_instance_ = new E2PetscSolverConfig();
  E2Model::default_instance_ = new E2Model();
  E2Config::default_instance_->InitAsDefaultInstance();
  E2State::default_instance_->InitAsDefaultInstance();
  E2State_Particles::default_instance_->InitAsDefaultInstance();
  E2PetscSolverConfig::default_instance_->InitAsDefaultInstance();
  E2Model::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fe2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fe2_2eproto {
  StaticDescriptorInitializer_model_5fe2_2eproto() {
    protobuf_AddDesc_model_5fe2_2eproto();
  }
} static_descriptor_initializer_model_5fe2_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int E2Config::kNFieldNumber;
const int E2Config::kAFieldNumber;
const int E2Config::kDeltaFieldNumber;
const int E2Config::kFFieldNumber;
#endif  // !_MSC_VER

E2Config::E2Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E2Config::InitAsDefaultInstance() {
}

E2Config::E2Config(const E2Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E2Config::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0u;
  a_ = 0;
  delta_ = 0;
  f_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E2Config::~E2Config() {
  SharedDtor();
}

void E2Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E2Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E2Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E2Config_descriptor_;
}

const E2Config& E2Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe2_2eproto();  return *default_instance_;
}

E2Config* E2Config::default_instance_ = NULL;

E2Config* E2Config::New() const {
  return new E2Config;
}

void E2Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_ = 0u;
    a_ = 0;
    delta_ = 0;
    f_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E2Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_A;
        break;
      }
      
      // optional double A = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_delta;
        break;
      }
      
      // optional double delta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_f;
        break;
      }
      
      // optional double f = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E2Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n(), output);
  }
  
  // optional double A = 2;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a(), output);
  }
  
  // optional double delta = 3;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->delta(), output);
  }
  
  // optional double f = 4;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->f(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E2Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n(), target);
  }
  
  // optional double A = 2;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a(), target);
  }
  
  // optional double delta = 3;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->delta(), target);
  }
  
  // optional double f = 4;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->f(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E2Config::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }
    
    // optional double A = 2;
    if (has_a()) {
      total_size += 1 + 8;
    }
    
    // optional double delta = 3;
    if (has_delta()) {
      total_size += 1 + 8;
    }
    
    // optional double f = 4;
    if (has_f()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E2Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E2Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E2Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E2Config::MergeFrom(const E2Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E2Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2Config::CopyFrom(const E2Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void E2Config::Swap(E2Config* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(a_, other->a_);
    std::swap(delta_, other->delta_);
    std::swap(f_, other->f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E2Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E2Config_descriptor_;
  metadata.reflection = E2Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E2State_Particles::kKsiFieldNumber;
const int E2State_Particles::kVFieldNumber;
#endif  // !_MSC_VER

E2State_Particles::E2State_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E2State_Particles::InitAsDefaultInstance() {
}

E2State_Particles::E2State_Particles(const E2State_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E2State_Particles::SharedCtor() {
  _cached_size_ = 0;
  ksi_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E2State_Particles::~E2State_Particles() {
  SharedDtor();
}

void E2State_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E2State_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E2State_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E2State_Particles_descriptor_;
}

const E2State_Particles& E2State_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe2_2eproto();  return *default_instance_;
}

E2State_Particles* E2State_Particles::default_instance_ = NULL;

E2State_Particles* E2State_Particles::New() const {
  return new E2State_Particles;
}

void E2State_Particles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ksi_ = 0;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E2State_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ksi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ksi_)));
          set_has_ksi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_v;
        break;
      }
      
      // required double v = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E2State_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double ksi = 3;
  if (has_ksi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ksi(), output);
  }
  
  // required double v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E2State_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double ksi = 3;
  if (has_ksi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ksi(), target);
  }
  
  // required double v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E2State_Particles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ksi = 3;
    if (has_ksi()) {
      total_size += 1 + 8;
    }
    
    // required double v = 4;
    if (has_v()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E2State_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E2State_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E2State_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E2State_Particles::MergeFrom(const E2State_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ksi()) {
      set_ksi(from.ksi());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E2State_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2State_Particles::CopyFrom(const E2State_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2State_Particles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void E2State_Particles::Swap(E2State_Particles* other) {
  if (other != this) {
    std::swap(ksi_, other->ksi_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E2State_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E2State_Particles_descriptor_;
  metadata.reflection = E2State_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E2State::kSimulatedFieldNumber;
const int E2State::kParticlesFieldNumber;
#endif  // !_MSC_VER

E2State::E2State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E2State::InitAsDefaultInstance() {
}

E2State::E2State(const E2State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E2State::SharedCtor() {
  _cached_size_ = 0;
  simulated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E2State::~E2State() {
  SharedDtor();
}

void E2State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E2State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E2State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E2State_descriptor_;
}

const E2State& E2State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe2_2eproto();  return *default_instance_;
}

E2State* E2State::default_instance_ = NULL;

E2State* E2State::New() const {
  return new E2State;
}

void E2State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    simulated_ = false;
  }
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E2State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool simulated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulated_)));
          set_has_simulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_particles;
        break;
      }
      
      // repeated group Particles = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_particles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E2State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool simulated = 1;
  if (has_simulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->simulated(), output);
  }
  
  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->particles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E2State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool simulated = 1;
  if (has_simulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->simulated(), target);
  }
  
  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->particles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E2State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool simulated = 1;
    if (has_simulated()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated group Particles = 2 {
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E2State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E2State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E2State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E2State::MergeFrom(const E2State& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simulated()) {
      set_simulated(from.simulated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E2State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2State::CopyFrom(const E2State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2State::IsInitialized() const {
  
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void E2State::Swap(E2State* other) {
  if (other != this) {
    std::swap(simulated_, other->simulated_);
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E2State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E2State_descriptor_;
  metadata.reflection = E2State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E2PetscSolverConfig::kToleranceFieldNumber;
const int E2PetscSolverConfig::kInitStepFieldNumber;
#endif  // !_MSC_VER

E2PetscSolverConfig::E2PetscSolverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E2PetscSolverConfig::InitAsDefaultInstance() {
}

E2PetscSolverConfig::E2PetscSolverConfig(const E2PetscSolverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E2PetscSolverConfig::SharedCtor() {
  _cached_size_ = 0;
  tolerance_ = 0;
  init_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E2PetscSolverConfig::~E2PetscSolverConfig() {
  SharedDtor();
}

void E2PetscSolverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E2PetscSolverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E2PetscSolverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E2PetscSolverConfig_descriptor_;
}

const E2PetscSolverConfig& E2PetscSolverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe2_2eproto();  return *default_instance_;
}

E2PetscSolverConfig* E2PetscSolverConfig::default_instance_ = NULL;

E2PetscSolverConfig* E2PetscSolverConfig::New() const {
  return new E2PetscSolverConfig;
}

void E2PetscSolverConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tolerance_ = 0;
    init_step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E2PetscSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tolerance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_init_step;
        break;
      }
      
      // optional double init_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_init_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_step_)));
          set_has_init_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E2PetscSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double tolerance = 1;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tolerance(), output);
  }
  
  // optional double init_step = 2;
  if (has_init_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->init_step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E2PetscSolverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tolerance = 1;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tolerance(), target);
  }
  
  // optional double init_step = 2;
  if (has_init_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->init_step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E2PetscSolverConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tolerance = 1;
    if (has_tolerance()) {
      total_size += 1 + 8;
    }
    
    // optional double init_step = 2;
    if (has_init_step()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E2PetscSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E2PetscSolverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E2PetscSolverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E2PetscSolverConfig::MergeFrom(const E2PetscSolverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_init_step()) {
      set_init_step(from.init_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E2PetscSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2PetscSolverConfig::CopyFrom(const E2PetscSolverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2PetscSolverConfig::IsInitialized() const {
  
  return true;
}

void E2PetscSolverConfig::Swap(E2PetscSolverConfig* other) {
  if (other != this) {
    std::swap(tolerance_, other->tolerance_);
    std::swap(init_step_, other->init_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E2PetscSolverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E2PetscSolverConfig_descriptor_;
  metadata.reflection = E2PetscSolverConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E2Model::kTimeFieldNumber;
const int E2Model::kStepsFieldNumber;
const int E2Model::kPconfigFieldNumber;
const int E2Model::kStateFieldNumber;
const int E2Model::kSconfigFieldNumber;
#endif  // !_MSC_VER

E2Model::E2Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E2Model::InitAsDefaultInstance() {
  pconfig_ = const_cast< ::pb::E2Config*>(&::pb::E2Config::default_instance());
  state_ = const_cast< ::pb::E2State*>(&::pb::E2State::default_instance());
  sconfig_ = const_cast< ::pb::E2PetscSolverConfig*>(&::pb::E2PetscSolverConfig::default_instance());
}

E2Model::E2Model(const E2Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E2Model::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  steps_ = 0u;
  pconfig_ = NULL;
  state_ = NULL;
  sconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E2Model::~E2Model() {
  SharedDtor();
}

void E2Model::SharedDtor() {
  if (this != default_instance_) {
    delete pconfig_;
    delete state_;
    delete sconfig_;
  }
}

void E2Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E2Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E2Model_descriptor_;
}

const E2Model& E2Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe2_2eproto();  return *default_instance_;
}

E2Model* E2Model::default_instance_ = NULL;

E2Model* E2Model::New() const {
  return new E2Model;
}

void E2Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    steps_ = 0u;
    if (has_pconfig()) {
      if (pconfig_ != NULL) pconfig_->::pb::E2Config::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E2State::Clear();
    }
    if (has_sconfig()) {
      if (sconfig_ != NULL) sconfig_->::pb::E2PetscSolverConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E2Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E2Config pconfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // required .pb.E2State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sconfig;
        break;
      }
      
      // required .pb.E2PetscSolverConfig sconfig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time;
        break;
      }
      
      // required double time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_steps;
        break;
      }
      
      // required uint32 steps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_)));
          set_has_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E2Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.E2Config pconfig = 1;
  if (has_pconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pconfig(), output);
  }
  
  // required .pb.E2State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // required .pb.E2PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sconfig(), output);
  }
  
  // required double time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time(), output);
  }
  
  // required uint32 steps = 5;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->steps(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E2Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.E2Config pconfig = 1;
  if (has_pconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pconfig(), target);
  }
  
  // required .pb.E2State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // required .pb.E2PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sconfig(), target);
  }
  
  // required double time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time(), target);
  }
  
  // required uint32 steps = 5;
  if (has_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->steps(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E2Model::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time = 4;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // required uint32 steps = 5;
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steps());
    }
    
    // required .pb.E2Config pconfig = 1;
    if (has_pconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pconfig());
    }
    
    // required .pb.E2State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // required .pb.E2PetscSolverConfig sconfig = 3;
    if (has_sconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sconfig());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E2Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E2Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E2Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E2Model::MergeFrom(const E2Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
    if (from.has_pconfig()) {
      mutable_pconfig()->::pb::E2Config::MergeFrom(from.pconfig());
    }
    if (from.has_state()) {
      mutable_state()->::pb::E2State::MergeFrom(from.state());
    }
    if (from.has_sconfig()) {
      mutable_sconfig()->::pb::E2PetscSolverConfig::MergeFrom(from.sconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E2Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2Model::CopyFrom(const E2Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_pconfig()) {
    if (!this->pconfig().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void E2Model::Swap(E2Model* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(steps_, other->steps_);
    std::swap(pconfig_, other->pconfig_);
    std::swap(state_, other->state_);
    std::swap(sconfig_, other->sconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E2Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E2Model_descriptor_;
  metadata.reflection = E2Model_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
