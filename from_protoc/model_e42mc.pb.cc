// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_e42mc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_e42mc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* E42mcConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E42mcState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcState_reflection_ = NULL;
const ::google::protobuf::Descriptor* E42mcState_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcState_Particles_reflection_ = NULL;
const ::google::protobuf::Descriptor* E42mcStateGeneratorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcStateGeneratorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E42mcModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E42mcSolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E42mcSolution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fe42mc_2eproto() {
  protobuf_AddDesc_model_5fe42mc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_e42mc.proto");
  GOOGLE_CHECK(file != NULL);
  E42mcConfig_descriptor_ = file->message_type(0);
  static const int E42mcConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, delta_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, delta_phi_),
  };
  E42mcConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcConfig_descriptor_,
      E42mcConfig::default_instance_,
      E42mcConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcConfig));
  E42mcState_descriptor_ = file->message_type(1);
  static const int E42mcState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, x_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, y_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, x_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, y_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, eout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, a0_),
  };
  E42mcState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcState_descriptor_,
      E42mcState::default_instance_,
      E42mcState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcState));
  E42mcState_Particles_descriptor_ = E42mcState_descriptor_->nested_type(0);
  static const int E42mcState_Particles_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, xn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, yn_),
  };
  E42mcState_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcState_Particles_descriptor_,
      E42mcState_Particles::default_instance_,
      E42mcState_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcState_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcState_Particles));
  E42mcStateGeneratorConfig_descriptor_ = file->message_type(2);
  static const int E42mcStateGeneratorConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, e_p0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, phi_p0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, a0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, e_m0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, phi_m0_),
  };
  E42mcStateGeneratorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcStateGeneratorConfig_descriptor_,
      E42mcStateGeneratorConfig::default_instance_,
      E42mcStateGeneratorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcStateGeneratorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcStateGeneratorConfig));
  E42mcModel_descriptor_ = file->message_type(3);
  static const int E42mcModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcModel, pconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcModel, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcModel, sconfig_),
  };
  E42mcModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcModel_descriptor_,
      E42mcModel::default_instance_,
      E42mcModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcModel));
  E42mcSolution_descriptor_ = file->message_type(4);
  static const int E42mcSolution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcSolution, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcSolution, d_state_),
  };
  E42mcSolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E42mcSolution_descriptor_,
      E42mcSolution::default_instance_,
      E42mcSolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcSolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E42mcSolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E42mcSolution));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fe42mc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcConfig_descriptor_, &E42mcConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcState_descriptor_, &E42mcState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcState_Particles_descriptor_, &E42mcState_Particles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcStateGeneratorConfig_descriptor_, &E42mcStateGeneratorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcModel_descriptor_, &E42mcModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E42mcSolution_descriptor_, &E42mcSolution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fe42mc_2eproto() {
  delete E42mcConfig::default_instance_;
  delete E42mcConfig_reflection_;
  delete E42mcState::default_instance_;
  delete E42mcState_reflection_;
  delete E42mcState_Particles::default_instance_;
  delete E42mcState_Particles_reflection_;
  delete E42mcStateGeneratorConfig::default_instance_;
  delete E42mcStateGeneratorConfig_reflection_;
  delete E42mcModel::default_instance_;
  delete E42mcModel_reflection_;
  delete E42mcSolution::default_instance_;
  delete E42mcSolution_reflection_;
}

void protobuf_AddDesc_model_5fe42mc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021model_e42mc.proto\022\002pb\032\014common.proto\"Z\n"
    "\013E42mcConfig\022\t\n\001N\030\001 \002(\r\022\017\n\007delta_0\030\002 \001(\001"
    "\022\r\n\005alpha\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\021\n\tdelta_"
    "phi\030\005 \001(\001\"\315\001\n\nE42mcState\022\013\n\003x_p\030\001 \002(\001\022\013\n"
    "\003y_p\030\002 \002(\001\022+\n\tparticles\030\003 \003(\n2\030.pb.E42mc"
    "State.Particles\022\013\n\003x_m\030\t \002(\001\022\013\n\003y_m\030\n \002("
    "\001\022\014\n\004Eout\030\013 \001(\001\022\n\n\002a0\030\014 \001(\001\032D\n\tParticles"
    "\022\t\n\001x\030\004 \002(\001\022\t\n\001y\030\005 \002(\001\022\t\n\001z\030\006 \002(\001\022\n\n\002xn\030"
    "\007 \002(\001\022\n\n\002yn\030\010 \002(\001\"c\n\031E42mcStateGenerator"
    "Config\022\014\n\004E_p0\030\001 \002(\001\022\016\n\006phi_p0\030\002 \002(\001\022\n\n\002"
    "A0\030\003 \002(\001\022\014\n\004E_m0\030\004 \002(\001\022\016\n\006phi_m0\030\005 \002(\001\"w"
    "\n\nE42mcModel\022 \n\007pconfig\030\001 \002(\0132\017.pb.E42mc"
    "Config\022\035\n\005state\030\002 \002(\0132\016.pb.E42mcState\022(\n"
    "\007sconfig\030\003 \002(\0132\027.pb.EXPetscSolverConfig\""
    "O\n\rE42mcSolution\022\035\n\005state\030\001 \002(\0132\016.pb.E42"
    "mcState\022\037\n\007d_state\030\002 \001(\0132\016.pb.E42mcState", 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_e42mc.proto", &protobuf_RegisterTypes);
  E42mcConfig::default_instance_ = new E42mcConfig();
  E42mcState::default_instance_ = new E42mcState();
  E42mcState_Particles::default_instance_ = new E42mcState_Particles();
  E42mcStateGeneratorConfig::default_instance_ = new E42mcStateGeneratorConfig();
  E42mcModel::default_instance_ = new E42mcModel();
  E42mcSolution::default_instance_ = new E42mcSolution();
  E42mcConfig::default_instance_->InitAsDefaultInstance();
  E42mcState::default_instance_->InitAsDefaultInstance();
  E42mcState_Particles::default_instance_->InitAsDefaultInstance();
  E42mcStateGeneratorConfig::default_instance_->InitAsDefaultInstance();
  E42mcModel::default_instance_->InitAsDefaultInstance();
  E42mcSolution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fe42mc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fe42mc_2eproto {
  StaticDescriptorInitializer_model_5fe42mc_2eproto() {
    protobuf_AddDesc_model_5fe42mc_2eproto();
  }
} static_descriptor_initializer_model_5fe42mc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E42mcConfig::kNFieldNumber;
const int E42mcConfig::kDelta0FieldNumber;
const int E42mcConfig::kAlphaFieldNumber;
const int E42mcConfig::kThetaFieldNumber;
const int E42mcConfig::kDeltaPhiFieldNumber;
#endif  // !_MSC_VER

E42mcConfig::E42mcConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcConfig)
}

void E42mcConfig::InitAsDefaultInstance() {
}

E42mcConfig::E42mcConfig(const E42mcConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcConfig)
}

void E42mcConfig::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0u;
  delta_0_ = 0;
  alpha_ = 0;
  theta_ = 0;
  delta_phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcConfig::~E42mcConfig() {
  // @@protoc_insertion_point(destructor:pb.E42mcConfig)
  SharedDtor();
}

void E42mcConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E42mcConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcConfig_descriptor_;
}

const E42mcConfig& E42mcConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcConfig* E42mcConfig::default_instance_ = NULL;

E42mcConfig* E42mcConfig::New() const {
  return new E42mcConfig;
}

void E42mcConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E42mcConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(delta_0_, n_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_delta_0;
        break;
      }

      // optional double delta_0 = 2;
      case 2: {
        if (tag == 17) {
         parse_delta_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_0_)));
          set_has_delta_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alpha;
        break;
      }

      // optional double alpha = 3;
      case 3: {
        if (tag == 25) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_delta_phi;
        break;
      }

      // optional double delta_phi = 5;
      case 5: {
        if (tag == 41) {
         parse_delta_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_phi_)));
          set_has_delta_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcConfig)
  return false;
#undef DO_
}

void E42mcConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcConfig)
  // required uint32 N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n(), output);
  }

  // optional double delta_0 = 2;
  if (has_delta_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delta_0(), output);
  }

  // optional double alpha = 3;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alpha(), output);
  }

  // optional double theta = 4;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double delta_phi = 5;
  if (has_delta_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delta_phi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcConfig)
}

::google::protobuf::uint8* E42mcConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcConfig)
  // required uint32 N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n(), target);
  }

  // optional double delta_0 = 2;
  if (has_delta_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delta_0(), target);
  }

  // optional double alpha = 3;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->alpha(), target);
  }

  // optional double theta = 4;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double delta_phi = 5;
  if (has_delta_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delta_phi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcConfig)
  return target;
}

int E42mcConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }

    // optional double delta_0 = 2;
    if (has_delta_0()) {
      total_size += 1 + 8;
    }

    // optional double alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double delta_phi = 5;
    if (has_delta_phi()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcConfig::MergeFrom(const E42mcConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_delta_0()) {
      set_delta_0(from.delta_0());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_delta_phi()) {
      set_delta_phi(from.delta_phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcConfig::CopyFrom(const E42mcConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void E42mcConfig::Swap(E42mcConfig* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(delta_0_, other->delta_0_);
    std::swap(alpha_, other->alpha_);
    std::swap(theta_, other->theta_);
    std::swap(delta_phi_, other->delta_phi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcConfig_descriptor_;
  metadata.reflection = E42mcConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E42mcState_Particles::kXFieldNumber;
const int E42mcState_Particles::kYFieldNumber;
const int E42mcState_Particles::kZFieldNumber;
const int E42mcState_Particles::kXnFieldNumber;
const int E42mcState_Particles::kYnFieldNumber;
#endif  // !_MSC_VER

E42mcState_Particles::E42mcState_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcState.Particles)
}

void E42mcState_Particles::InitAsDefaultInstance() {
}

E42mcState_Particles::E42mcState_Particles(const E42mcState_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcState.Particles)
}

void E42mcState_Particles::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  xn_ = 0;
  yn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcState_Particles::~E42mcState_Particles() {
  // @@protoc_insertion_point(destructor:pb.E42mcState.Particles)
  SharedDtor();
}

void E42mcState_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E42mcState_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcState_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcState_Particles_descriptor_;
}

const E42mcState_Particles& E42mcState_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcState_Particles* E42mcState_Particles::default_instance_ = NULL;

E42mcState_Particles* E42mcState_Particles::New() const {
  return new E42mcState_Particles;
}

void E42mcState_Particles::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E42mcState_Particles*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, yn_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcState_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcState.Particles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 4;
      case 4: {
        if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // required double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z;
        break;
      }

      // required double z = 6;
      case 6: {
        if (tag == 49) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_xn;
        break;
      }

      // required double xn = 7;
      case 7: {
        if (tag == 57) {
         parse_xn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xn_)));
          set_has_xn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_yn;
        break;
      }

      // required double yn = 8;
      case 8: {
        if (tag == 65) {
         parse_yn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yn_)));
          set_has_yn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcState.Particles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcState.Particles)
  return false;
#undef DO_
}

void E42mcState_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcState.Particles)
  // required double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // required double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // required double z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z(), output);
  }

  // required double xn = 7;
  if (has_xn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->xn(), output);
  }

  // required double yn = 8;
  if (has_yn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcState.Particles)
}

::google::protobuf::uint8* E42mcState_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcState.Particles)
  // required double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // required double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // required double z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z(), target);
  }

  // required double xn = 7;
  if (has_xn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->xn(), target);
  }

  // required double yn = 8;
  if (has_yn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcState.Particles)
  return target;
}

int E42mcState_Particles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 6;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double xn = 7;
    if (has_xn()) {
      total_size += 1 + 8;
    }

    // required double yn = 8;
    if (has_yn()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcState_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcState_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcState_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcState_Particles::MergeFrom(const E42mcState_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_xn()) {
      set_xn(from.xn());
    }
    if (from.has_yn()) {
      set_yn(from.yn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcState_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcState_Particles::CopyFrom(const E42mcState_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcState_Particles::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void E42mcState_Particles::Swap(E42mcState_Particles* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(xn_, other->xn_);
    std::swap(yn_, other->yn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcState_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcState_Particles_descriptor_;
  metadata.reflection = E42mcState_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E42mcState::kXPFieldNumber;
const int E42mcState::kYPFieldNumber;
const int E42mcState::kParticlesFieldNumber;
const int E42mcState::kXMFieldNumber;
const int E42mcState::kYMFieldNumber;
const int E42mcState::kEoutFieldNumber;
const int E42mcState::kA0FieldNumber;
#endif  // !_MSC_VER

E42mcState::E42mcState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcState)
}

void E42mcState::InitAsDefaultInstance() {
}

E42mcState::E42mcState(const E42mcState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcState)
}

void E42mcState::SharedCtor() {
  _cached_size_ = 0;
  x_p_ = 0;
  y_p_ = 0;
  x_m_ = 0;
  y_m_ = 0;
  eout_ = 0;
  a0_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcState::~E42mcState() {
  // @@protoc_insertion_point(destructor:pb.E42mcState)
  SharedDtor();
}

void E42mcState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E42mcState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcState_descriptor_;
}

const E42mcState& E42mcState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcState* E42mcState::default_instance_ = NULL;

E42mcState* E42mcState::New() const {
  return new E42mcState;
}

void E42mcState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E42mcState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(x_p_, y_p_);
    ZR_(x_m_, a0_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x_p = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_p_)));
          set_has_x_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y_p;
        break;
      }

      // required double y_p = 2;
      case 2: {
        if (tag == 17) {
         parse_y_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_p_)));
          set_has_y_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_particles;
        break;
      }

      // repeated group Particles = 3 {
      case 3: {
        if (tag == 27) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                3, input, add_particles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_particles;
        if (input->ExpectTag(73)) goto parse_x_m;
        break;
      }

      // required double x_m = 9;
      case 9: {
        if (tag == 73) {
         parse_x_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_m_)));
          set_has_x_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_y_m;
        break;
      }

      // required double y_m = 10;
      case 10: {
        if (tag == 81) {
         parse_y_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_m_)));
          set_has_y_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Eout;
        break;
      }

      // optional double Eout = 11;
      case 11: {
        if (tag == 89) {
         parse_Eout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eout_)));
          set_has_eout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_a0;
        break;
      }

      // optional double a0 = 12;
      case 12: {
        if (tag == 97) {
         parse_a0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a0_)));
          set_has_a0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcState)
  return false;
#undef DO_
}

void E42mcState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcState)
  // required double x_p = 1;
  if (has_x_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x_p(), output);
  }

  // required double y_p = 2;
  if (has_y_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y_p(), output);
  }

  // repeated group Particles = 3 {
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3, this->particles(i), output);
  }

  // required double x_m = 9;
  if (has_x_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->x_m(), output);
  }

  // required double y_m = 10;
  if (has_y_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->y_m(), output);
  }

  // optional double Eout = 11;
  if (has_eout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->eout(), output);
  }

  // optional double a0 = 12;
  if (has_a0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->a0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcState)
}

::google::protobuf::uint8* E42mcState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcState)
  // required double x_p = 1;
  if (has_x_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x_p(), target);
  }

  // required double y_p = 2;
  if (has_y_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y_p(), target);
  }

  // repeated group Particles = 3 {
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        3, this->particles(i), target);
  }

  // required double x_m = 9;
  if (has_x_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->x_m(), target);
  }

  // required double y_m = 10;
  if (has_y_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->y_m(), target);
  }

  // optional double Eout = 11;
  if (has_eout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->eout(), target);
  }

  // optional double a0 = 12;
  if (has_a0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->a0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcState)
  return target;
}

int E42mcState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x_p = 1;
    if (has_x_p()) {
      total_size += 1 + 8;
    }

    // required double y_p = 2;
    if (has_y_p()) {
      total_size += 1 + 8;
    }

    // required double x_m = 9;
    if (has_x_m()) {
      total_size += 1 + 8;
    }

    // required double y_m = 10;
    if (has_y_m()) {
      total_size += 1 + 8;
    }

    // optional double Eout = 11;
    if (has_eout()) {
      total_size += 1 + 8;
    }

    // optional double a0 = 12;
    if (has_a0()) {
      total_size += 1 + 8;
    }

  }
  // repeated group Particles = 3 {
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->particles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcState::MergeFrom(const E42mcState& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_p()) {
      set_x_p(from.x_p());
    }
    if (from.has_y_p()) {
      set_y_p(from.y_p());
    }
    if (from.has_x_m()) {
      set_x_m(from.x_m());
    }
    if (from.has_y_m()) {
      set_y_m(from.y_m());
    }
    if (from.has_eout()) {
      set_eout(from.eout());
    }
    if (from.has_a0()) {
      set_a0(from.a0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcState::CopyFrom(const E42mcState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->particles())) return false;
  return true;
}

void E42mcState::Swap(E42mcState* other) {
  if (other != this) {
    std::swap(x_p_, other->x_p_);
    std::swap(y_p_, other->y_p_);
    particles_.Swap(&other->particles_);
    std::swap(x_m_, other->x_m_);
    std::swap(y_m_, other->y_m_);
    std::swap(eout_, other->eout_);
    std::swap(a0_, other->a0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcState_descriptor_;
  metadata.reflection = E42mcState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E42mcStateGeneratorConfig::kEP0FieldNumber;
const int E42mcStateGeneratorConfig::kPhiP0FieldNumber;
const int E42mcStateGeneratorConfig::kA0FieldNumber;
const int E42mcStateGeneratorConfig::kEM0FieldNumber;
const int E42mcStateGeneratorConfig::kPhiM0FieldNumber;
#endif  // !_MSC_VER

E42mcStateGeneratorConfig::E42mcStateGeneratorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcStateGeneratorConfig)
}

void E42mcStateGeneratorConfig::InitAsDefaultInstance() {
}

E42mcStateGeneratorConfig::E42mcStateGeneratorConfig(const E42mcStateGeneratorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcStateGeneratorConfig)
}

void E42mcStateGeneratorConfig::SharedCtor() {
  _cached_size_ = 0;
  e_p0_ = 0;
  phi_p0_ = 0;
  a0_ = 0;
  e_m0_ = 0;
  phi_m0_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcStateGeneratorConfig::~E42mcStateGeneratorConfig() {
  // @@protoc_insertion_point(destructor:pb.E42mcStateGeneratorConfig)
  SharedDtor();
}

void E42mcStateGeneratorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E42mcStateGeneratorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcStateGeneratorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcStateGeneratorConfig_descriptor_;
}

const E42mcStateGeneratorConfig& E42mcStateGeneratorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcStateGeneratorConfig* E42mcStateGeneratorConfig::default_instance_ = NULL;

E42mcStateGeneratorConfig* E42mcStateGeneratorConfig::New() const {
  return new E42mcStateGeneratorConfig;
}

void E42mcStateGeneratorConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E42mcStateGeneratorConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(e_p0_, phi_m0_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcStateGeneratorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcStateGeneratorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double E_p0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_p0_)));
          set_has_e_p0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_phi_p0;
        break;
      }

      // required double phi_p0 = 2;
      case 2: {
        if (tag == 17) {
         parse_phi_p0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_p0_)));
          set_has_phi_p0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_A0;
        break;
      }

      // required double A0 = 3;
      case 3: {
        if (tag == 25) {
         parse_A0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a0_)));
          set_has_a0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_E_m0;
        break;
      }

      // required double E_m0 = 4;
      case 4: {
        if (tag == 33) {
         parse_E_m0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_m0_)));
          set_has_e_m0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_phi_m0;
        break;
      }

      // required double phi_m0 = 5;
      case 5: {
        if (tag == 41) {
         parse_phi_m0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_m0_)));
          set_has_phi_m0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcStateGeneratorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcStateGeneratorConfig)
  return false;
#undef DO_
}

void E42mcStateGeneratorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcStateGeneratorConfig)
  // required double E_p0 = 1;
  if (has_e_p0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e_p0(), output);
  }

  // required double phi_p0 = 2;
  if (has_phi_p0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_p0(), output);
  }

  // required double A0 = 3;
  if (has_a0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a0(), output);
  }

  // required double E_m0 = 4;
  if (has_e_m0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->e_m0(), output);
  }

  // required double phi_m0 = 5;
  if (has_phi_m0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->phi_m0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcStateGeneratorConfig)
}

::google::protobuf::uint8* E42mcStateGeneratorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcStateGeneratorConfig)
  // required double E_p0 = 1;
  if (has_e_p0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e_p0(), target);
  }

  // required double phi_p0 = 2;
  if (has_phi_p0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_p0(), target);
  }

  // required double A0 = 3;
  if (has_a0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a0(), target);
  }

  // required double E_m0 = 4;
  if (has_e_m0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->e_m0(), target);
  }

  // required double phi_m0 = 5;
  if (has_phi_m0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->phi_m0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcStateGeneratorConfig)
  return target;
}

int E42mcStateGeneratorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double E_p0 = 1;
    if (has_e_p0()) {
      total_size += 1 + 8;
    }

    // required double phi_p0 = 2;
    if (has_phi_p0()) {
      total_size += 1 + 8;
    }

    // required double A0 = 3;
    if (has_a0()) {
      total_size += 1 + 8;
    }

    // required double E_m0 = 4;
    if (has_e_m0()) {
      total_size += 1 + 8;
    }

    // required double phi_m0 = 5;
    if (has_phi_m0()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcStateGeneratorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcStateGeneratorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcStateGeneratorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcStateGeneratorConfig::MergeFrom(const E42mcStateGeneratorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e_p0()) {
      set_e_p0(from.e_p0());
    }
    if (from.has_phi_p0()) {
      set_phi_p0(from.phi_p0());
    }
    if (from.has_a0()) {
      set_a0(from.a0());
    }
    if (from.has_e_m0()) {
      set_e_m0(from.e_m0());
    }
    if (from.has_phi_m0()) {
      set_phi_m0(from.phi_m0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcStateGeneratorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcStateGeneratorConfig::CopyFrom(const E42mcStateGeneratorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcStateGeneratorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void E42mcStateGeneratorConfig::Swap(E42mcStateGeneratorConfig* other) {
  if (other != this) {
    std::swap(e_p0_, other->e_p0_);
    std::swap(phi_p0_, other->phi_p0_);
    std::swap(a0_, other->a0_);
    std::swap(e_m0_, other->e_m0_);
    std::swap(phi_m0_, other->phi_m0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcStateGeneratorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcStateGeneratorConfig_descriptor_;
  metadata.reflection = E42mcStateGeneratorConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E42mcModel::kPconfigFieldNumber;
const int E42mcModel::kStateFieldNumber;
const int E42mcModel::kSconfigFieldNumber;
#endif  // !_MSC_VER

E42mcModel::E42mcModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcModel)
}

void E42mcModel::InitAsDefaultInstance() {
  pconfig_ = const_cast< ::pb::E42mcConfig*>(&::pb::E42mcConfig::default_instance());
  state_ = const_cast< ::pb::E42mcState*>(&::pb::E42mcState::default_instance());
  sconfig_ = const_cast< ::pb::EXPetscSolverConfig*>(&::pb::EXPetscSolverConfig::default_instance());
}

E42mcModel::E42mcModel(const E42mcModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcModel)
}

void E42mcModel::SharedCtor() {
  _cached_size_ = 0;
  pconfig_ = NULL;
  state_ = NULL;
  sconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcModel::~E42mcModel() {
  // @@protoc_insertion_point(destructor:pb.E42mcModel)
  SharedDtor();
}

void E42mcModel::SharedDtor() {
  if (this != default_instance_) {
    delete pconfig_;
    delete state_;
    delete sconfig_;
  }
}

void E42mcModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcModel_descriptor_;
}

const E42mcModel& E42mcModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcModel* E42mcModel::default_instance_ = NULL;

E42mcModel* E42mcModel::New() const {
  return new E42mcModel;
}

void E42mcModel::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pconfig()) {
      if (pconfig_ != NULL) pconfig_->::pb::E42mcConfig::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E42mcState::Clear();
    }
    if (has_sconfig()) {
      if (sconfig_ != NULL) sconfig_->::pb::EXPetscSolverConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E42mcConfig pconfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required .pb.E42mcState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sconfig;
        break;
      }

      // required .pb.EXPetscSolverConfig sconfig = 3;
      case 3: {
        if (tag == 26) {
         parse_sconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcModel)
  return false;
#undef DO_
}

void E42mcModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcModel)
  // required .pb.E42mcConfig pconfig = 1;
  if (has_pconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pconfig(), output);
  }

  // required .pb.E42mcState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  // required .pb.EXPetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcModel)
}

::google::protobuf::uint8* E42mcModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcModel)
  // required .pb.E42mcConfig pconfig = 1;
  if (has_pconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pconfig(), target);
  }

  // required .pb.E42mcState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  // required .pb.EXPetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcModel)
  return target;
}

int E42mcModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E42mcConfig pconfig = 1;
    if (has_pconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pconfig());
    }

    // required .pb.E42mcState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // required .pb.EXPetscSolverConfig sconfig = 3;
    if (has_sconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcModel::MergeFrom(const E42mcModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pconfig()) {
      mutable_pconfig()->::pb::E42mcConfig::MergeFrom(from.pconfig());
    }
    if (from.has_state()) {
      mutable_state()->::pb::E42mcState::MergeFrom(from.state());
    }
    if (from.has_sconfig()) {
      mutable_sconfig()->::pb::EXPetscSolverConfig::MergeFrom(from.sconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcModel::CopyFrom(const E42mcModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pconfig()) {
    if (!this->pconfig().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void E42mcModel::Swap(E42mcModel* other) {
  if (other != this) {
    std::swap(pconfig_, other->pconfig_);
    std::swap(state_, other->state_);
    std::swap(sconfig_, other->sconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcModel_descriptor_;
  metadata.reflection = E42mcModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E42mcSolution::kStateFieldNumber;
const int E42mcSolution::kDStateFieldNumber;
#endif  // !_MSC_VER

E42mcSolution::E42mcSolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E42mcSolution)
}

void E42mcSolution::InitAsDefaultInstance() {
  state_ = const_cast< ::pb::E42mcState*>(&::pb::E42mcState::default_instance());
  d_state_ = const_cast< ::pb::E42mcState*>(&::pb::E42mcState::default_instance());
}

E42mcSolution::E42mcSolution(const E42mcSolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E42mcSolution)
}

void E42mcSolution::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  d_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E42mcSolution::~E42mcSolution() {
  // @@protoc_insertion_point(destructor:pb.E42mcSolution)
  SharedDtor();
}

void E42mcSolution::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete d_state_;
  }
}

void E42mcSolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E42mcSolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E42mcSolution_descriptor_;
}

const E42mcSolution& E42mcSolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe42mc_2eproto();
  return *default_instance_;
}

E42mcSolution* E42mcSolution::default_instance_ = NULL;

E42mcSolution* E42mcSolution::New() const {
  return new E42mcSolution;
}

void E42mcSolution::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E42mcState::Clear();
    }
    if (has_d_state()) {
      if (d_state_ != NULL) d_state_->::pb::E42mcState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E42mcSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E42mcSolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E42mcState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_d_state;
        break;
      }

      // optional .pb.E42mcState d_state = 2;
      case 2: {
        if (tag == 18) {
         parse_d_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E42mcSolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E42mcSolution)
  return false;
#undef DO_
}

void E42mcSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E42mcSolution)
  // required .pb.E42mcState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .pb.E42mcState d_state = 2;
  if (has_d_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->d_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E42mcSolution)
}

::google::protobuf::uint8* E42mcSolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E42mcSolution)
  // required .pb.E42mcState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .pb.E42mcState d_state = 2;
  if (has_d_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->d_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E42mcSolution)
  return target;
}

int E42mcSolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E42mcState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .pb.E42mcState d_state = 2;
    if (has_d_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E42mcSolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E42mcSolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E42mcSolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E42mcSolution::MergeFrom(const E42mcSolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::pb::E42mcState::MergeFrom(from.state());
    }
    if (from.has_d_state()) {
      mutable_d_state()->::pb::E42mcState::MergeFrom(from.d_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E42mcSolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E42mcSolution::CopyFrom(const E42mcSolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E42mcSolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_d_state()) {
    if (!this->d_state().IsInitialized()) return false;
  }
  return true;
}

void E42mcSolution::Swap(E42mcSolution* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(d_state_, other->d_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E42mcSolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E42mcSolution_descriptor_;
  metadata.reflection = E42mcSolution_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
