// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_e4mm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_e4mm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* E4mmConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmState_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmState_Fields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmState_Fields_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmState_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmState_Particles_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmStateGeneratorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmStateGeneratorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4mmSolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4mmSolution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fe4mm_2eproto() {
  protobuf_AddDesc_model_5fe4mm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_e4mm.proto");
  GOOGLE_CHECK(file != NULL);
  E4mmConfig_descriptor_ = file->message_type(0);
  static const int E4mmConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, n0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, gamma_omega_),
  };
  E4mmConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmConfig_descriptor_,
      E4mmConfig::default_instance_,
      E4mmConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmConfig));
  E4mmState_descriptor_ = file->message_type(1);
  static const int E4mmState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState, particles_),
  };
  E4mmState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmState_descriptor_,
      E4mmState::default_instance_,
      E4mmState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmState));
  E4mmState_Fields_descriptor_ = E4mmState_descriptor_->nested_type(0);
  static const int E4mmState_Fields_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Fields, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Fields, phi_),
  };
  E4mmState_Fields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmState_Fields_descriptor_,
      E4mmState_Fields::default_instance_,
      E4mmState_Fields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Fields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Fields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmState_Fields));
  E4mmState_Particles_descriptor_ = E4mmState_descriptor_->nested_type(1);
  static const int E4mmState_Particles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Particles, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Particles, psi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Particles, z_),
  };
  E4mmState_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmState_Particles_descriptor_,
      E4mmState_Particles::default_instance_,
      E4mmState_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmState_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmState_Particles));
  E4mmStateGeneratorConfig_descriptor_ = file->message_type(2);
  static const int E4mmStateGeneratorConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmStateGeneratorConfig, e0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmStateGeneratorConfig, a0_),
  };
  E4mmStateGeneratorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmStateGeneratorConfig_descriptor_,
      E4mmStateGeneratorConfig::default_instance_,
      E4mmStateGeneratorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmStateGeneratorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmStateGeneratorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmStateGeneratorConfig));
  E4mmModel_descriptor_ = file->message_type(3);
  static const int E4mmModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmModel, pconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmModel, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmModel, sconfig_),
  };
  E4mmModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmModel_descriptor_,
      E4mmModel::default_instance_,
      E4mmModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmModel));
  E4mmSolution_descriptor_ = file->message_type(4);
  static const int E4mmSolution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmSolution, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmSolution, d_state_),
  };
  E4mmSolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4mmSolution_descriptor_,
      E4mmSolution::default_instance_,
      E4mmSolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmSolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4mmSolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4mmSolution));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fe4mm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmConfig_descriptor_, &E4mmConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmState_descriptor_, &E4mmState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmState_Fields_descriptor_, &E4mmState_Fields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmState_Particles_descriptor_, &E4mmState_Particles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmStateGeneratorConfig_descriptor_, &E4mmStateGeneratorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmModel_descriptor_, &E4mmModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4mmSolution_descriptor_, &E4mmSolution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fe4mm_2eproto() {
  delete E4mmConfig::default_instance_;
  delete E4mmConfig_reflection_;
  delete E4mmState::default_instance_;
  delete E4mmState_reflection_;
  delete E4mmState_Fields::default_instance_;
  delete E4mmState_Fields_reflection_;
  delete E4mmState_Particles::default_instance_;
  delete E4mmState_Particles_reflection_;
  delete E4mmStateGeneratorConfig::default_instance_;
  delete E4mmStateGeneratorConfig_reflection_;
  delete E4mmModel::default_instance_;
  delete E4mmModel_reflection_;
  delete E4mmSolution::default_instance_;
  delete E4mmSolution_reflection_;
}

void protobuf_AddDesc_model_5fe4mm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020model_e4mm.proto\022\002pb\032\014common.proto\"k\n\n"
    "E4mmConfig\022\t\n\001N\030\001 \002(\r\022\n\n\002n0\030\002 \002(\r\022\t\n\001k\030\003"
    " \002(\r\022\014\n\004beta\030\004 \002(\001\022\r\n\005alpha\030\005 \001(\001\022\t\n\001s\030\006"
    " \001(\001\022\023\n\013gamma_omega\030\007 \001(\001\"\257\001\n\tE4mmState\022"
    "$\n\006fields\030\001 \003(\n2\024.pb.E4mmState.Fields\022*\n"
    "\tparticles\030\002 \003(\n2\027.pb.E4mmState.Particle"
    "s\032 \n\006Fields\022\t\n\001E\030\003 \002(\001\022\013\n\003phi\030\004 \002(\001\032.\n\tP"
    "articles\022\t\n\001a\030\005 \002(\001\022\013\n\003psi\030\006 \002(\001\022\t\n\001z\030\007 "
    "\002(\001\"2\n\030E4mmStateGeneratorConfig\022\n\n\002E0\030\001 "
    "\002(\001\022\n\n\002A0\030\002 \002(\001\"t\n\tE4mmModel\022\037\n\007pconfig\030"
    "\001 \002(\0132\016.pb.E4mmConfig\022\034\n\005state\030\002 \002(\0132\r.p"
    "b.E4mmState\022(\n\007sconfig\030\003 \002(\0132\027.pb.EXPets"
    "cSolverConfig\"L\n\014E4mmSolution\022\034\n\005state\030\001"
    " \002(\0132\r.pb.E4mmState\022\036\n\007d_state\030\002 \001(\0132\r.p"
    "b.E4mmState", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_e4mm.proto", &protobuf_RegisterTypes);
  E4mmConfig::default_instance_ = new E4mmConfig();
  E4mmState::default_instance_ = new E4mmState();
  E4mmState_Fields::default_instance_ = new E4mmState_Fields();
  E4mmState_Particles::default_instance_ = new E4mmState_Particles();
  E4mmStateGeneratorConfig::default_instance_ = new E4mmStateGeneratorConfig();
  E4mmModel::default_instance_ = new E4mmModel();
  E4mmSolution::default_instance_ = new E4mmSolution();
  E4mmConfig::default_instance_->InitAsDefaultInstance();
  E4mmState::default_instance_->InitAsDefaultInstance();
  E4mmState_Fields::default_instance_->InitAsDefaultInstance();
  E4mmState_Particles::default_instance_->InitAsDefaultInstance();
  E4mmStateGeneratorConfig::default_instance_->InitAsDefaultInstance();
  E4mmModel::default_instance_->InitAsDefaultInstance();
  E4mmSolution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fe4mm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fe4mm_2eproto {
  StaticDescriptorInitializer_model_5fe4mm_2eproto() {
    protobuf_AddDesc_model_5fe4mm_2eproto();
  }
} static_descriptor_initializer_model_5fe4mm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E4mmConfig::kNFieldNumber;
const int E4mmConfig::kN0FieldNumber;
const int E4mmConfig::kKFieldNumber;
const int E4mmConfig::kBetaFieldNumber;
const int E4mmConfig::kAlphaFieldNumber;
const int E4mmConfig::kSFieldNumber;
const int E4mmConfig::kGammaOmegaFieldNumber;
#endif  // !_MSC_VER

E4mmConfig::E4mmConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmConfig)
}

void E4mmConfig::InitAsDefaultInstance() {
}

E4mmConfig::E4mmConfig(const E4mmConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmConfig)
}

void E4mmConfig::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0u;
  n0_ = 0u;
  k_ = 0u;
  beta_ = 0;
  alpha_ = 0;
  s_ = 0;
  gamma_omega_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmConfig::~E4mmConfig() {
  // @@protoc_insertion_point(destructor:pb.E4mmConfig)
  SharedDtor();
}

void E4mmConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4mmConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmConfig_descriptor_;
}

const E4mmConfig& E4mmConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmConfig* E4mmConfig::default_instance_ = NULL;

E4mmConfig* E4mmConfig::New() const {
  return new E4mmConfig;
}

void E4mmConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4mmConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(n_, k_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_n0;
        break;
      }

      // required uint32 n0 = 2;
      case 2: {
        if (tag == 16) {
         parse_n0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n0_)));
          set_has_n0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_k;
        break;
      }

      // required uint32 k = 3;
      case 3: {
        if (tag == 24) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_beta;
        break;
      }

      // required double beta = 4;
      case 4: {
        if (tag == 33) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_alpha;
        break;
      }

      // optional double alpha = 5;
      case 5: {
        if (tag == 41) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_s;
        break;
      }

      // optional double s = 6;
      case 6: {
        if (tag == 49) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_gamma_omega;
        break;
      }

      // optional double gamma_omega = 7;
      case 7: {
        if (tag == 57) {
         parse_gamma_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_omega_)));
          set_has_gamma_omega();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmConfig)
  return false;
#undef DO_
}

void E4mmConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmConfig)
  // required uint32 N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n(), output);
  }

  // required uint32 n0 = 2;
  if (has_n0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->n0(), output);
  }

  // required uint32 k = 3;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->k(), output);
  }

  // required double beta = 4;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->beta(), output);
  }

  // optional double alpha = 5;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->alpha(), output);
  }

  // optional double s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional double gamma_omega = 7;
  if (has_gamma_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->gamma_omega(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmConfig)
}

::google::protobuf::uint8* E4mmConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmConfig)
  // required uint32 N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n(), target);
  }

  // required uint32 n0 = 2;
  if (has_n0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->n0(), target);
  }

  // required uint32 k = 3;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->k(), target);
  }

  // required double beta = 4;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->beta(), target);
  }

  // optional double alpha = 5;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->alpha(), target);
  }

  // optional double s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional double gamma_omega = 7;
  if (has_gamma_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->gamma_omega(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmConfig)
  return target;
}

int E4mmConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }

    // required uint32 n0 = 2;
    if (has_n0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n0());
    }

    // required uint32 k = 3;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

    // required double beta = 4;
    if (has_beta()) {
      total_size += 1 + 8;
    }

    // optional double alpha = 5;
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double gamma_omega = 7;
    if (has_gamma_omega()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmConfig::MergeFrom(const E4mmConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_n0()) {
      set_n0(from.n0());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_gamma_omega()) {
      set_gamma_omega(from.gamma_omega());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmConfig::CopyFrom(const E4mmConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void E4mmConfig::Swap(E4mmConfig* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(n0_, other->n0_);
    std::swap(k_, other->k_);
    std::swap(beta_, other->beta_);
    std::swap(alpha_, other->alpha_);
    std::swap(s_, other->s_);
    std::swap(gamma_omega_, other->gamma_omega_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmConfig_descriptor_;
  metadata.reflection = E4mmConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4mmState_Fields::kEFieldNumber;
const int E4mmState_Fields::kPhiFieldNumber;
#endif  // !_MSC_VER

E4mmState_Fields::E4mmState_Fields()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmState.Fields)
}

void E4mmState_Fields::InitAsDefaultInstance() {
}

E4mmState_Fields::E4mmState_Fields(const E4mmState_Fields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmState.Fields)
}

void E4mmState_Fields::SharedCtor() {
  _cached_size_ = 0;
  e_ = 0;
  phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmState_Fields::~E4mmState_Fields() {
  // @@protoc_insertion_point(destructor:pb.E4mmState.Fields)
  SharedDtor();
}

void E4mmState_Fields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4mmState_Fields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmState_Fields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmState_Fields_descriptor_;
}

const E4mmState_Fields& E4mmState_Fields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmState_Fields* E4mmState_Fields::default_instance_ = NULL;

E4mmState_Fields* E4mmState_Fields::New() const {
  return new E4mmState_Fields;
}

void E4mmState_Fields::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4mmState_Fields*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(e_, phi_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmState_Fields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmState.Fields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double E = 3;
      case 3: {
        if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_phi;
        break;
      }

      // required double phi = 4;
      case 4: {
        if (tag == 33) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmState.Fields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmState.Fields)
  return false;
#undef DO_
}

void E4mmState_Fields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmState.Fields)
  // required double E = 3;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->e(), output);
  }

  // required double phi = 4;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->phi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmState.Fields)
}

::google::protobuf::uint8* E4mmState_Fields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmState.Fields)
  // required double E = 3;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->e(), target);
  }

  // required double phi = 4;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->phi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmState.Fields)
  return target;
}

int E4mmState_Fields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double E = 3;
    if (has_e()) {
      total_size += 1 + 8;
    }

    // required double phi = 4;
    if (has_phi()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmState_Fields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmState_Fields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmState_Fields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmState_Fields::MergeFrom(const E4mmState_Fields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmState_Fields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmState_Fields::CopyFrom(const E4mmState_Fields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmState_Fields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void E4mmState_Fields::Swap(E4mmState_Fields* other) {
  if (other != this) {
    std::swap(e_, other->e_);
    std::swap(phi_, other->phi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmState_Fields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmState_Fields_descriptor_;
  metadata.reflection = E4mmState_Fields_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E4mmState_Particles::kAFieldNumber;
const int E4mmState_Particles::kPsiFieldNumber;
const int E4mmState_Particles::kZFieldNumber;
#endif  // !_MSC_VER

E4mmState_Particles::E4mmState_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmState.Particles)
}

void E4mmState_Particles::InitAsDefaultInstance() {
}

E4mmState_Particles::E4mmState_Particles(const E4mmState_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmState.Particles)
}

void E4mmState_Particles::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  psi_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmState_Particles::~E4mmState_Particles() {
  // @@protoc_insertion_point(destructor:pb.E4mmState.Particles)
  SharedDtor();
}

void E4mmState_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4mmState_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmState_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmState_Particles_descriptor_;
}

const E4mmState_Particles& E4mmState_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmState_Particles* E4mmState_Particles::default_instance_ = NULL;

E4mmState_Particles* E4mmState_Particles::New() const {
  return new E4mmState_Particles;
}

void E4mmState_Particles::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4mmState_Particles*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmState_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmState.Particles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double a = 5;
      case 5: {
        if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_psi;
        break;
      }

      // required double psi = 6;
      case 6: {
        if (tag == 49) {
         parse_psi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &psi_)));
          set_has_psi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_z;
        break;
      }

      // required double z = 7;
      case 7: {
        if (tag == 57) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmState.Particles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmState.Particles)
  return false;
#undef DO_
}

void E4mmState_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmState.Particles)
  // required double a = 5;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->a(), output);
  }

  // required double psi = 6;
  if (has_psi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->psi(), output);
  }

  // required double z = 7;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmState.Particles)
}

::google::protobuf::uint8* E4mmState_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmState.Particles)
  // required double a = 5;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->a(), target);
  }

  // required double psi = 6;
  if (has_psi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->psi(), target);
  }

  // required double z = 7;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmState.Particles)
  return target;
}

int E4mmState_Particles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double a = 5;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // required double psi = 6;
    if (has_psi()) {
      total_size += 1 + 8;
    }

    // required double z = 7;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmState_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmState_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmState_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmState_Particles::MergeFrom(const E4mmState_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_psi()) {
      set_psi(from.psi());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmState_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmState_Particles::CopyFrom(const E4mmState_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmState_Particles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void E4mmState_Particles::Swap(E4mmState_Particles* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(psi_, other->psi_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmState_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmState_Particles_descriptor_;
  metadata.reflection = E4mmState_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E4mmState::kFieldsFieldNumber;
const int E4mmState::kParticlesFieldNumber;
#endif  // !_MSC_VER

E4mmState::E4mmState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmState)
}

void E4mmState::InitAsDefaultInstance() {
}

E4mmState::E4mmState(const E4mmState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmState)
}

void E4mmState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmState::~E4mmState() {
  // @@protoc_insertion_point(destructor:pb.E4mmState)
  SharedDtor();
}

void E4mmState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4mmState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmState_descriptor_;
}

const E4mmState& E4mmState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmState* E4mmState::default_instance_ = NULL;

E4mmState* E4mmState::New() const {
  return new E4mmState;
}

void E4mmState::Clear() {
  fields_.Clear();
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Fields = 1 {
      case 1: {
        if (tag == 11) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(11)) goto parse_fields;
        if (input->ExpectTag(19)) goto parse_particles;
        break;
      }

      // repeated group Particles = 2 {
      case 2: {
        if (tag == 19) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_particles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(19)) goto parse_particles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmState)
  return false;
#undef DO_
}

void E4mmState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmState)
  // repeated group Fields = 1 {
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      1, this->fields(i), output);
  }

  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->particles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmState)
}

::google::protobuf::uint8* E4mmState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmState)
  // repeated group Fields = 1 {
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        1, this->fields(i), target);
  }

  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->particles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmState)
  return target;
}

int E4mmState::ByteSize() const {
  int total_size = 0;

  // repeated group Fields = 1 {
  total_size += 2 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->fields(i));
  }

  // repeated group Particles = 2 {
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->particles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmState::MergeFrom(const E4mmState& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  particles_.MergeFrom(from.particles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmState::CopyFrom(const E4mmState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->particles())) return false;
  return true;
}

void E4mmState::Swap(E4mmState* other) {
  if (other != this) {
    fields_.Swap(&other->fields_);
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmState_descriptor_;
  metadata.reflection = E4mmState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4mmStateGeneratorConfig::kE0FieldNumber;
const int E4mmStateGeneratorConfig::kA0FieldNumber;
#endif  // !_MSC_VER

E4mmStateGeneratorConfig::E4mmStateGeneratorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmStateGeneratorConfig)
}

void E4mmStateGeneratorConfig::InitAsDefaultInstance() {
}

E4mmStateGeneratorConfig::E4mmStateGeneratorConfig(const E4mmStateGeneratorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmStateGeneratorConfig)
}

void E4mmStateGeneratorConfig::SharedCtor() {
  _cached_size_ = 0;
  e0_ = 0;
  a0_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmStateGeneratorConfig::~E4mmStateGeneratorConfig() {
  // @@protoc_insertion_point(destructor:pb.E4mmStateGeneratorConfig)
  SharedDtor();
}

void E4mmStateGeneratorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4mmStateGeneratorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmStateGeneratorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmStateGeneratorConfig_descriptor_;
}

const E4mmStateGeneratorConfig& E4mmStateGeneratorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmStateGeneratorConfig* E4mmStateGeneratorConfig::default_instance_ = NULL;

E4mmStateGeneratorConfig* E4mmStateGeneratorConfig::New() const {
  return new E4mmStateGeneratorConfig;
}

void E4mmStateGeneratorConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4mmStateGeneratorConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(e0_, a0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmStateGeneratorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmStateGeneratorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double E0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e0_)));
          set_has_e0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_A0;
        break;
      }

      // required double A0 = 2;
      case 2: {
        if (tag == 17) {
         parse_A0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a0_)));
          set_has_a0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmStateGeneratorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmStateGeneratorConfig)
  return false;
#undef DO_
}

void E4mmStateGeneratorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmStateGeneratorConfig)
  // required double E0 = 1;
  if (has_e0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e0(), output);
  }

  // required double A0 = 2;
  if (has_a0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmStateGeneratorConfig)
}

::google::protobuf::uint8* E4mmStateGeneratorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmStateGeneratorConfig)
  // required double E0 = 1;
  if (has_e0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e0(), target);
  }

  // required double A0 = 2;
  if (has_a0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmStateGeneratorConfig)
  return target;
}

int E4mmStateGeneratorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double E0 = 1;
    if (has_e0()) {
      total_size += 1 + 8;
    }

    // required double A0 = 2;
    if (has_a0()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmStateGeneratorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmStateGeneratorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmStateGeneratorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmStateGeneratorConfig::MergeFrom(const E4mmStateGeneratorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e0()) {
      set_e0(from.e0());
    }
    if (from.has_a0()) {
      set_a0(from.a0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmStateGeneratorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmStateGeneratorConfig::CopyFrom(const E4mmStateGeneratorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmStateGeneratorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void E4mmStateGeneratorConfig::Swap(E4mmStateGeneratorConfig* other) {
  if (other != this) {
    std::swap(e0_, other->e0_);
    std::swap(a0_, other->a0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmStateGeneratorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmStateGeneratorConfig_descriptor_;
  metadata.reflection = E4mmStateGeneratorConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4mmModel::kPconfigFieldNumber;
const int E4mmModel::kStateFieldNumber;
const int E4mmModel::kSconfigFieldNumber;
#endif  // !_MSC_VER

E4mmModel::E4mmModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmModel)
}

void E4mmModel::InitAsDefaultInstance() {
  pconfig_ = const_cast< ::pb::E4mmConfig*>(&::pb::E4mmConfig::default_instance());
  state_ = const_cast< ::pb::E4mmState*>(&::pb::E4mmState::default_instance());
  sconfig_ = const_cast< ::pb::EXPetscSolverConfig*>(&::pb::EXPetscSolverConfig::default_instance());
}

E4mmModel::E4mmModel(const E4mmModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmModel)
}

void E4mmModel::SharedCtor() {
  _cached_size_ = 0;
  pconfig_ = NULL;
  state_ = NULL;
  sconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmModel::~E4mmModel() {
  // @@protoc_insertion_point(destructor:pb.E4mmModel)
  SharedDtor();
}

void E4mmModel::SharedDtor() {
  if (this != default_instance_) {
    delete pconfig_;
    delete state_;
    delete sconfig_;
  }
}

void E4mmModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmModel_descriptor_;
}

const E4mmModel& E4mmModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmModel* E4mmModel::default_instance_ = NULL;

E4mmModel* E4mmModel::New() const {
  return new E4mmModel;
}

void E4mmModel::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pconfig()) {
      if (pconfig_ != NULL) pconfig_->::pb::E4mmConfig::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E4mmState::Clear();
    }
    if (has_sconfig()) {
      if (sconfig_ != NULL) sconfig_->::pb::EXPetscSolverConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E4mmConfig pconfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required .pb.E4mmState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sconfig;
        break;
      }

      // required .pb.EXPetscSolverConfig sconfig = 3;
      case 3: {
        if (tag == 26) {
         parse_sconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmModel)
  return false;
#undef DO_
}

void E4mmModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmModel)
  // required .pb.E4mmConfig pconfig = 1;
  if (has_pconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pconfig(), output);
  }

  // required .pb.E4mmState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  // required .pb.EXPetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmModel)
}

::google::protobuf::uint8* E4mmModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmModel)
  // required .pb.E4mmConfig pconfig = 1;
  if (has_pconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pconfig(), target);
  }

  // required .pb.E4mmState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  // required .pb.EXPetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmModel)
  return target;
}

int E4mmModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E4mmConfig pconfig = 1;
    if (has_pconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pconfig());
    }

    // required .pb.E4mmState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // required .pb.EXPetscSolverConfig sconfig = 3;
    if (has_sconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmModel::MergeFrom(const E4mmModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pconfig()) {
      mutable_pconfig()->::pb::E4mmConfig::MergeFrom(from.pconfig());
    }
    if (from.has_state()) {
      mutable_state()->::pb::E4mmState::MergeFrom(from.state());
    }
    if (from.has_sconfig()) {
      mutable_sconfig()->::pb::EXPetscSolverConfig::MergeFrom(from.sconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmModel::CopyFrom(const E4mmModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pconfig()) {
    if (!this->pconfig().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void E4mmModel::Swap(E4mmModel* other) {
  if (other != this) {
    std::swap(pconfig_, other->pconfig_);
    std::swap(state_, other->state_);
    std::swap(sconfig_, other->sconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmModel_descriptor_;
  metadata.reflection = E4mmModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4mmSolution::kStateFieldNumber;
const int E4mmSolution::kDStateFieldNumber;
#endif  // !_MSC_VER

E4mmSolution::E4mmSolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4mmSolution)
}

void E4mmSolution::InitAsDefaultInstance() {
  state_ = const_cast< ::pb::E4mmState*>(&::pb::E4mmState::default_instance());
  d_state_ = const_cast< ::pb::E4mmState*>(&::pb::E4mmState::default_instance());
}

E4mmSolution::E4mmSolution(const E4mmSolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4mmSolution)
}

void E4mmSolution::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  d_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4mmSolution::~E4mmSolution() {
  // @@protoc_insertion_point(destructor:pb.E4mmSolution)
  SharedDtor();
}

void E4mmSolution::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete d_state_;
  }
}

void E4mmSolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4mmSolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4mmSolution_descriptor_;
}

const E4mmSolution& E4mmSolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4mm_2eproto();
  return *default_instance_;
}

E4mmSolution* E4mmSolution::default_instance_ = NULL;

E4mmSolution* E4mmSolution::New() const {
  return new E4mmSolution;
}

void E4mmSolution::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E4mmState::Clear();
    }
    if (has_d_state()) {
      if (d_state_ != NULL) d_state_->::pb::E4mmState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4mmSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4mmSolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E4mmState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_d_state;
        break;
      }

      // optional .pb.E4mmState d_state = 2;
      case 2: {
        if (tag == 18) {
         parse_d_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4mmSolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4mmSolution)
  return false;
#undef DO_
}

void E4mmSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4mmSolution)
  // required .pb.E4mmState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .pb.E4mmState d_state = 2;
  if (has_d_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->d_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4mmSolution)
}

::google::protobuf::uint8* E4mmSolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4mmSolution)
  // required .pb.E4mmState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .pb.E4mmState d_state = 2;
  if (has_d_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->d_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4mmSolution)
  return target;
}

int E4mmSolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E4mmState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .pb.E4mmState d_state = 2;
    if (has_d_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4mmSolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4mmSolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4mmSolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4mmSolution::MergeFrom(const E4mmSolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::pb::E4mmState::MergeFrom(from.state());
    }
    if (from.has_d_state()) {
      mutable_d_state()->::pb::E4mmState::MergeFrom(from.d_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4mmSolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4mmSolution::CopyFrom(const E4mmSolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4mmSolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_d_state()) {
    if (!this->d_state().IsInitialized()) return false;
  }
  return true;
}

void E4mmSolution::Swap(E4mmSolution* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(d_state_, other->d_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4mmSolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4mmSolution_descriptor_;
  metadata.reflection = E4mmSolution_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
