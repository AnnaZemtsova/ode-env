// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_e42mc.proto

#ifndef PROTOBUF_model_5fe42mc_2eproto__INCLUDED
#define PROTOBUF_model_5fe42mc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_5fe42mc_2eproto();
void protobuf_AssignDesc_model_5fe42mc_2eproto();
void protobuf_ShutdownFile_model_5fe42mc_2eproto();

class E42mcConfig;
class E42mcState;
class E42mcState_Particles;
class E42mcStateGeneratorConfig;
class E42mcModel;
class E42mcSolution;

// ===================================================================

class E42mcConfig : public ::google::protobuf::Message {
 public:
  E42mcConfig();
  virtual ~E42mcConfig();

  E42mcConfig(const E42mcConfig& from);

  inline E42mcConfig& operator=(const E42mcConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcConfig& default_instance();

  void Swap(E42mcConfig* other);

  // implements Message ----------------------------------------------

  E42mcConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcConfig& from);
  void MergeFrom(const E42mcConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 N = 1;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 1;
  inline ::google::protobuf::uint32 n() const;
  inline void set_n(::google::protobuf::uint32 value);

  // optional double delta_0 = 2;
  inline bool has_delta_0() const;
  inline void clear_delta_0();
  static const int kDelta0FieldNumber = 2;
  inline double delta_0() const;
  inline void set_delta_0(double value);

  // optional double alpha = 3;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline double alpha() const;
  inline void set_alpha(double value);

  // optional double theta = 4;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 4;
  inline double theta() const;
  inline void set_theta(double value);

  // @@protoc_insertion_point(class_scope:pb.E42mcConfig)
 private:
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_delta_0();
  inline void clear_has_delta_0();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_theta();
  inline void clear_has_theta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double delta_0_;
  double alpha_;
  double theta_;
  ::google::protobuf::uint32 n_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcConfig* default_instance_;
};
// -------------------------------------------------------------------

class E42mcState_Particles : public ::google::protobuf::Message {
 public:
  E42mcState_Particles();
  virtual ~E42mcState_Particles();

  E42mcState_Particles(const E42mcState_Particles& from);

  inline E42mcState_Particles& operator=(const E42mcState_Particles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcState_Particles& default_instance();

  void Swap(E42mcState_Particles* other);

  // implements Message ----------------------------------------------

  E42mcState_Particles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcState_Particles& from);
  void MergeFrom(const E42mcState_Particles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 6;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 6;
  inline double z() const;
  inline void set_z(double value);

  // required double xn = 7;
  inline bool has_xn() const;
  inline void clear_xn();
  static const int kXnFieldNumber = 7;
  inline double xn() const;
  inline void set_xn(double value);

  // required double yn = 8;
  inline bool has_yn() const;
  inline void clear_yn();
  static const int kYnFieldNumber = 8;
  inline double yn() const;
  inline void set_yn(double value);

  // @@protoc_insertion_point(class_scope:pb.E42mcState.Particles)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_xn();
  inline void clear_has_xn();
  inline void set_has_yn();
  inline void clear_has_yn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double xn_;
  double yn_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcState_Particles* default_instance_;
};
// -------------------------------------------------------------------

class E42mcState : public ::google::protobuf::Message {
 public:
  E42mcState();
  virtual ~E42mcState();

  E42mcState(const E42mcState& from);

  inline E42mcState& operator=(const E42mcState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcState& default_instance();

  void Swap(E42mcState* other);

  // implements Message ----------------------------------------------

  E42mcState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcState& from);
  void MergeFrom(const E42mcState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef E42mcState_Particles Particles;

  // accessors -------------------------------------------------------

  // required double x_p = 1;
  inline bool has_x_p() const;
  inline void clear_x_p();
  static const int kXPFieldNumber = 1;
  inline double x_p() const;
  inline void set_x_p(double value);

  // required double y_p = 2;
  inline bool has_y_p() const;
  inline void clear_y_p();
  static const int kYPFieldNumber = 2;
  inline double y_p() const;
  inline void set_y_p(double value);

  // repeated group Particles = 3 {
  inline int particles_size() const;
  inline void clear_particles();
  static const int kParticlesFieldNumber = 3;
  inline const ::pb::E42mcState_Particles& particles(int index) const;
  inline ::pb::E42mcState_Particles* mutable_particles(int index);
  inline ::pb::E42mcState_Particles* add_particles();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::E42mcState_Particles >&
      particles() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::E42mcState_Particles >*
      mutable_particles();

  // required double x_m = 9;
  inline bool has_x_m() const;
  inline void clear_x_m();
  static const int kXMFieldNumber = 9;
  inline double x_m() const;
  inline void set_x_m(double value);

  // required double y_m = 10;
  inline bool has_y_m() const;
  inline void clear_y_m();
  static const int kYMFieldNumber = 10;
  inline double y_m() const;
  inline void set_y_m(double value);

  // optional double Eout = 11;
  inline bool has_eout() const;
  inline void clear_eout();
  static const int kEoutFieldNumber = 11;
  inline double eout() const;
  inline void set_eout(double value);

  // @@protoc_insertion_point(class_scope:pb.E42mcState)
 private:
  inline void set_has_x_p();
  inline void clear_has_x_p();
  inline void set_has_y_p();
  inline void clear_has_y_p();
  inline void set_has_x_m();
  inline void clear_has_x_m();
  inline void set_has_y_m();
  inline void clear_has_y_m();
  inline void set_has_eout();
  inline void clear_has_eout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_p_;
  double y_p_;
  ::google::protobuf::RepeatedPtrField< ::pb::E42mcState_Particles > particles_;
  double x_m_;
  double y_m_;
  double eout_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcState* default_instance_;
};
// -------------------------------------------------------------------

class E42mcStateGeneratorConfig : public ::google::protobuf::Message {
 public:
  E42mcStateGeneratorConfig();
  virtual ~E42mcStateGeneratorConfig();

  E42mcStateGeneratorConfig(const E42mcStateGeneratorConfig& from);

  inline E42mcStateGeneratorConfig& operator=(const E42mcStateGeneratorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcStateGeneratorConfig& default_instance();

  void Swap(E42mcStateGeneratorConfig* other);

  // implements Message ----------------------------------------------

  E42mcStateGeneratorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcStateGeneratorConfig& from);
  void MergeFrom(const E42mcStateGeneratorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double E_p0 = 1;
  inline bool has_e_p0() const;
  inline void clear_e_p0();
  static const int kEP0FieldNumber = 1;
  inline double e_p0() const;
  inline void set_e_p0(double value);

  // required double phi_p0 = 2;
  inline bool has_phi_p0() const;
  inline void clear_phi_p0();
  static const int kPhiP0FieldNumber = 2;
  inline double phi_p0() const;
  inline void set_phi_p0(double value);

  // required double A0 = 3;
  inline bool has_a0() const;
  inline void clear_a0();
  static const int kA0FieldNumber = 3;
  inline double a0() const;
  inline void set_a0(double value);

  // required double E_m0 = 4;
  inline bool has_e_m0() const;
  inline void clear_e_m0();
  static const int kEM0FieldNumber = 4;
  inline double e_m0() const;
  inline void set_e_m0(double value);

  // required double phi_m0 = 5;
  inline bool has_phi_m0() const;
  inline void clear_phi_m0();
  static const int kPhiM0FieldNumber = 5;
  inline double phi_m0() const;
  inline void set_phi_m0(double value);

  // @@protoc_insertion_point(class_scope:pb.E42mcStateGeneratorConfig)
 private:
  inline void set_has_e_p0();
  inline void clear_has_e_p0();
  inline void set_has_phi_p0();
  inline void clear_has_phi_p0();
  inline void set_has_a0();
  inline void clear_has_a0();
  inline void set_has_e_m0();
  inline void clear_has_e_m0();
  inline void set_has_phi_m0();
  inline void clear_has_phi_m0();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double e_p0_;
  double phi_p0_;
  double a0_;
  double e_m0_;
  double phi_m0_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcStateGeneratorConfig* default_instance_;
};
// -------------------------------------------------------------------

class E42mcModel : public ::google::protobuf::Message {
 public:
  E42mcModel();
  virtual ~E42mcModel();

  E42mcModel(const E42mcModel& from);

  inline E42mcModel& operator=(const E42mcModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcModel& default_instance();

  void Swap(E42mcModel* other);

  // implements Message ----------------------------------------------

  E42mcModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcModel& from);
  void MergeFrom(const E42mcModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.E42mcConfig pconfig = 1;
  inline bool has_pconfig() const;
  inline void clear_pconfig();
  static const int kPconfigFieldNumber = 1;
  inline const ::pb::E42mcConfig& pconfig() const;
  inline ::pb::E42mcConfig* mutable_pconfig();
  inline ::pb::E42mcConfig* release_pconfig();
  inline void set_allocated_pconfig(::pb::E42mcConfig* pconfig);

  // required .pb.E42mcState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::pb::E42mcState& state() const;
  inline ::pb::E42mcState* mutable_state();
  inline ::pb::E42mcState* release_state();
  inline void set_allocated_state(::pb::E42mcState* state);

  // required .pb.EXPetscSolverConfig sconfig = 3;
  inline bool has_sconfig() const;
  inline void clear_sconfig();
  static const int kSconfigFieldNumber = 3;
  inline const ::pb::EXPetscSolverConfig& sconfig() const;
  inline ::pb::EXPetscSolverConfig* mutable_sconfig();
  inline ::pb::EXPetscSolverConfig* release_sconfig();
  inline void set_allocated_sconfig(::pb::EXPetscSolverConfig* sconfig);

  // @@protoc_insertion_point(class_scope:pb.E42mcModel)
 private:
  inline void set_has_pconfig();
  inline void clear_has_pconfig();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_sconfig();
  inline void clear_has_sconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::E42mcConfig* pconfig_;
  ::pb::E42mcState* state_;
  ::pb::EXPetscSolverConfig* sconfig_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcModel* default_instance_;
};
// -------------------------------------------------------------------

class E42mcSolution : public ::google::protobuf::Message {
 public:
  E42mcSolution();
  virtual ~E42mcSolution();

  E42mcSolution(const E42mcSolution& from);

  inline E42mcSolution& operator=(const E42mcSolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E42mcSolution& default_instance();

  void Swap(E42mcSolution* other);

  // implements Message ----------------------------------------------

  E42mcSolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E42mcSolution& from);
  void MergeFrom(const E42mcSolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.E42mcState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::pb::E42mcState& state() const;
  inline ::pb::E42mcState* mutable_state();
  inline ::pb::E42mcState* release_state();
  inline void set_allocated_state(::pb::E42mcState* state);

  // optional .pb.E42mcState d_state = 2;
  inline bool has_d_state() const;
  inline void clear_d_state();
  static const int kDStateFieldNumber = 2;
  inline const ::pb::E42mcState& d_state() const;
  inline ::pb::E42mcState* mutable_d_state();
  inline ::pb::E42mcState* release_d_state();
  inline void set_allocated_d_state(::pb::E42mcState* d_state);

  // @@protoc_insertion_point(class_scope:pb.E42mcSolution)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_d_state();
  inline void clear_has_d_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::E42mcState* state_;
  ::pb::E42mcState* d_state_;
  friend void  protobuf_AddDesc_model_5fe42mc_2eproto();
  friend void protobuf_AssignDesc_model_5fe42mc_2eproto();
  friend void protobuf_ShutdownFile_model_5fe42mc_2eproto();

  void InitAsDefaultInstance();
  static E42mcSolution* default_instance_;
};
// ===================================================================


// ===================================================================

// E42mcConfig

// required uint32 N = 1;
inline bool E42mcConfig::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcConfig::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcConfig::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcConfig::clear_n() {
  n_ = 0u;
  clear_has_n();
}
inline ::google::protobuf::uint32 E42mcConfig::n() const {
  // @@protoc_insertion_point(field_get:pb.E42mcConfig.N)
  return n_;
}
inline void E42mcConfig::set_n(::google::protobuf::uint32 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcConfig.N)
}

// optional double delta_0 = 2;
inline bool E42mcConfig::has_delta_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcConfig::set_has_delta_0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcConfig::clear_has_delta_0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcConfig::clear_delta_0() {
  delta_0_ = 0;
  clear_has_delta_0();
}
inline double E42mcConfig::delta_0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcConfig.delta_0)
  return delta_0_;
}
inline void E42mcConfig::set_delta_0(double value) {
  set_has_delta_0();
  delta_0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcConfig.delta_0)
}

// optional double alpha = 3;
inline bool E42mcConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E42mcConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E42mcConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E42mcConfig::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline double E42mcConfig::alpha() const {
  // @@protoc_insertion_point(field_get:pb.E42mcConfig.alpha)
  return alpha_;
}
inline void E42mcConfig::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcConfig.alpha)
}

// optional double theta = 4;
inline bool E42mcConfig::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E42mcConfig::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E42mcConfig::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E42mcConfig::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double E42mcConfig::theta() const {
  // @@protoc_insertion_point(field_get:pb.E42mcConfig.theta)
  return theta_;
}
inline void E42mcConfig::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcConfig.theta)
}

// -------------------------------------------------------------------

// E42mcState_Particles

// required double x = 4;
inline bool E42mcState_Particles::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcState_Particles::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcState_Particles::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcState_Particles::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double E42mcState_Particles::x() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Particles.x)
  return x_;
}
inline void E42mcState_Particles::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Particles.x)
}

// required double y = 5;
inline bool E42mcState_Particles::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcState_Particles::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcState_Particles::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcState_Particles::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double E42mcState_Particles::y() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Particles.y)
  return y_;
}
inline void E42mcState_Particles::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Particles.y)
}

// required double z = 6;
inline bool E42mcState_Particles::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E42mcState_Particles::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E42mcState_Particles::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E42mcState_Particles::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double E42mcState_Particles::z() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Particles.z)
  return z_;
}
inline void E42mcState_Particles::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Particles.z)
}

// required double xn = 7;
inline bool E42mcState_Particles::has_xn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E42mcState_Particles::set_has_xn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E42mcState_Particles::clear_has_xn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E42mcState_Particles::clear_xn() {
  xn_ = 0;
  clear_has_xn();
}
inline double E42mcState_Particles::xn() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Particles.xn)
  return xn_;
}
inline void E42mcState_Particles::set_xn(double value) {
  set_has_xn();
  xn_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Particles.xn)
}

// required double yn = 8;
inline bool E42mcState_Particles::has_yn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E42mcState_Particles::set_has_yn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E42mcState_Particles::clear_has_yn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E42mcState_Particles::clear_yn() {
  yn_ = 0;
  clear_has_yn();
}
inline double E42mcState_Particles::yn() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Particles.yn)
  return yn_;
}
inline void E42mcState_Particles::set_yn(double value) {
  set_has_yn();
  yn_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Particles.yn)
}

// -------------------------------------------------------------------

// E42mcState

// required double x_p = 1;
inline bool E42mcState::has_x_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcState::set_has_x_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcState::clear_has_x_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcState::clear_x_p() {
  x_p_ = 0;
  clear_has_x_p();
}
inline double E42mcState::x_p() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.x_p)
  return x_p_;
}
inline void E42mcState::set_x_p(double value) {
  set_has_x_p();
  x_p_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.x_p)
}

// required double y_p = 2;
inline bool E42mcState::has_y_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcState::set_has_y_p() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcState::clear_has_y_p() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcState::clear_y_p() {
  y_p_ = 0;
  clear_has_y_p();
}
inline double E42mcState::y_p() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.y_p)
  return y_p_;
}
inline void E42mcState::set_y_p(double value) {
  set_has_y_p();
  y_p_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.y_p)
}

// repeated group Particles = 3 {
inline int E42mcState::particles_size() const {
  return particles_.size();
}
inline void E42mcState::clear_particles() {
  particles_.Clear();
}
inline const ::pb::E42mcState_Particles& E42mcState::particles(int index) const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.particles)
  return particles_.Get(index);
}
inline ::pb::E42mcState_Particles* E42mcState::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:pb.E42mcState.particles)
  return particles_.Mutable(index);
}
inline ::pb::E42mcState_Particles* E42mcState::add_particles() {
  // @@protoc_insertion_point(field_add:pb.E42mcState.particles)
  return particles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::E42mcState_Particles >&
E42mcState::particles() const {
  // @@protoc_insertion_point(field_list:pb.E42mcState.particles)
  return particles_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::E42mcState_Particles >*
E42mcState::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:pb.E42mcState.particles)
  return &particles_;
}

// required double x_m = 9;
inline bool E42mcState::has_x_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E42mcState::set_has_x_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E42mcState::clear_has_x_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E42mcState::clear_x_m() {
  x_m_ = 0;
  clear_has_x_m();
}
inline double E42mcState::x_m() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.x_m)
  return x_m_;
}
inline void E42mcState::set_x_m(double value) {
  set_has_x_m();
  x_m_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.x_m)
}

// required double y_m = 10;
inline bool E42mcState::has_y_m() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E42mcState::set_has_y_m() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E42mcState::clear_has_y_m() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E42mcState::clear_y_m() {
  y_m_ = 0;
  clear_has_y_m();
}
inline double E42mcState::y_m() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.y_m)
  return y_m_;
}
inline void E42mcState::set_y_m(double value) {
  set_has_y_m();
  y_m_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.y_m)
}

// optional double Eout = 11;
inline bool E42mcState::has_eout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E42mcState::set_has_eout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E42mcState::clear_has_eout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E42mcState::clear_eout() {
  eout_ = 0;
  clear_has_eout();
}
inline double E42mcState::eout() const {
  // @@protoc_insertion_point(field_get:pb.E42mcState.Eout)
  return eout_;
}
inline void E42mcState::set_eout(double value) {
  set_has_eout();
  eout_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcState.Eout)
}

// -------------------------------------------------------------------

// E42mcStateGeneratorConfig

// required double E_p0 = 1;
inline bool E42mcStateGeneratorConfig::has_e_p0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcStateGeneratorConfig::set_has_e_p0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcStateGeneratorConfig::clear_has_e_p0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcStateGeneratorConfig::clear_e_p0() {
  e_p0_ = 0;
  clear_has_e_p0();
}
inline double E42mcStateGeneratorConfig::e_p0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcStateGeneratorConfig.E_p0)
  return e_p0_;
}
inline void E42mcStateGeneratorConfig::set_e_p0(double value) {
  set_has_e_p0();
  e_p0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcStateGeneratorConfig.E_p0)
}

// required double phi_p0 = 2;
inline bool E42mcStateGeneratorConfig::has_phi_p0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcStateGeneratorConfig::set_has_phi_p0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcStateGeneratorConfig::clear_has_phi_p0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcStateGeneratorConfig::clear_phi_p0() {
  phi_p0_ = 0;
  clear_has_phi_p0();
}
inline double E42mcStateGeneratorConfig::phi_p0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcStateGeneratorConfig.phi_p0)
  return phi_p0_;
}
inline void E42mcStateGeneratorConfig::set_phi_p0(double value) {
  set_has_phi_p0();
  phi_p0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcStateGeneratorConfig.phi_p0)
}

// required double A0 = 3;
inline bool E42mcStateGeneratorConfig::has_a0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E42mcStateGeneratorConfig::set_has_a0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E42mcStateGeneratorConfig::clear_has_a0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E42mcStateGeneratorConfig::clear_a0() {
  a0_ = 0;
  clear_has_a0();
}
inline double E42mcStateGeneratorConfig::a0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcStateGeneratorConfig.A0)
  return a0_;
}
inline void E42mcStateGeneratorConfig::set_a0(double value) {
  set_has_a0();
  a0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcStateGeneratorConfig.A0)
}

// required double E_m0 = 4;
inline bool E42mcStateGeneratorConfig::has_e_m0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E42mcStateGeneratorConfig::set_has_e_m0() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E42mcStateGeneratorConfig::clear_has_e_m0() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E42mcStateGeneratorConfig::clear_e_m0() {
  e_m0_ = 0;
  clear_has_e_m0();
}
inline double E42mcStateGeneratorConfig::e_m0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcStateGeneratorConfig.E_m0)
  return e_m0_;
}
inline void E42mcStateGeneratorConfig::set_e_m0(double value) {
  set_has_e_m0();
  e_m0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcStateGeneratorConfig.E_m0)
}

// required double phi_m0 = 5;
inline bool E42mcStateGeneratorConfig::has_phi_m0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E42mcStateGeneratorConfig::set_has_phi_m0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E42mcStateGeneratorConfig::clear_has_phi_m0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E42mcStateGeneratorConfig::clear_phi_m0() {
  phi_m0_ = 0;
  clear_has_phi_m0();
}
inline double E42mcStateGeneratorConfig::phi_m0() const {
  // @@protoc_insertion_point(field_get:pb.E42mcStateGeneratorConfig.phi_m0)
  return phi_m0_;
}
inline void E42mcStateGeneratorConfig::set_phi_m0(double value) {
  set_has_phi_m0();
  phi_m0_ = value;
  // @@protoc_insertion_point(field_set:pb.E42mcStateGeneratorConfig.phi_m0)
}

// -------------------------------------------------------------------

// E42mcModel

// required .pb.E42mcConfig pconfig = 1;
inline bool E42mcModel::has_pconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcModel::set_has_pconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcModel::clear_has_pconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcModel::clear_pconfig() {
  if (pconfig_ != NULL) pconfig_->::pb::E42mcConfig::Clear();
  clear_has_pconfig();
}
inline const ::pb::E42mcConfig& E42mcModel::pconfig() const {
  // @@protoc_insertion_point(field_get:pb.E42mcModel.pconfig)
  return pconfig_ != NULL ? *pconfig_ : *default_instance_->pconfig_;
}
inline ::pb::E42mcConfig* E42mcModel::mutable_pconfig() {
  set_has_pconfig();
  if (pconfig_ == NULL) pconfig_ = new ::pb::E42mcConfig;
  // @@protoc_insertion_point(field_mutable:pb.E42mcModel.pconfig)
  return pconfig_;
}
inline ::pb::E42mcConfig* E42mcModel::release_pconfig() {
  clear_has_pconfig();
  ::pb::E42mcConfig* temp = pconfig_;
  pconfig_ = NULL;
  return temp;
}
inline void E42mcModel::set_allocated_pconfig(::pb::E42mcConfig* pconfig) {
  delete pconfig_;
  pconfig_ = pconfig;
  if (pconfig) {
    set_has_pconfig();
  } else {
    clear_has_pconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.E42mcModel.pconfig)
}

// required .pb.E42mcState state = 2;
inline bool E42mcModel::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcModel::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcModel::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcModel::clear_state() {
  if (state_ != NULL) state_->::pb::E42mcState::Clear();
  clear_has_state();
}
inline const ::pb::E42mcState& E42mcModel::state() const {
  // @@protoc_insertion_point(field_get:pb.E42mcModel.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::pb::E42mcState* E42mcModel::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::pb::E42mcState;
  // @@protoc_insertion_point(field_mutable:pb.E42mcModel.state)
  return state_;
}
inline ::pb::E42mcState* E42mcModel::release_state() {
  clear_has_state();
  ::pb::E42mcState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void E42mcModel::set_allocated_state(::pb::E42mcState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.E42mcModel.state)
}

// required .pb.EXPetscSolverConfig sconfig = 3;
inline bool E42mcModel::has_sconfig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E42mcModel::set_has_sconfig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E42mcModel::clear_has_sconfig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E42mcModel::clear_sconfig() {
  if (sconfig_ != NULL) sconfig_->::pb::EXPetscSolverConfig::Clear();
  clear_has_sconfig();
}
inline const ::pb::EXPetscSolverConfig& E42mcModel::sconfig() const {
  // @@protoc_insertion_point(field_get:pb.E42mcModel.sconfig)
  return sconfig_ != NULL ? *sconfig_ : *default_instance_->sconfig_;
}
inline ::pb::EXPetscSolverConfig* E42mcModel::mutable_sconfig() {
  set_has_sconfig();
  if (sconfig_ == NULL) sconfig_ = new ::pb::EXPetscSolverConfig;
  // @@protoc_insertion_point(field_mutable:pb.E42mcModel.sconfig)
  return sconfig_;
}
inline ::pb::EXPetscSolverConfig* E42mcModel::release_sconfig() {
  clear_has_sconfig();
  ::pb::EXPetscSolverConfig* temp = sconfig_;
  sconfig_ = NULL;
  return temp;
}
inline void E42mcModel::set_allocated_sconfig(::pb::EXPetscSolverConfig* sconfig) {
  delete sconfig_;
  sconfig_ = sconfig;
  if (sconfig) {
    set_has_sconfig();
  } else {
    clear_has_sconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.E42mcModel.sconfig)
}

// -------------------------------------------------------------------

// E42mcSolution

// required .pb.E42mcState state = 1;
inline bool E42mcSolution::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E42mcSolution::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E42mcSolution::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E42mcSolution::clear_state() {
  if (state_ != NULL) state_->::pb::E42mcState::Clear();
  clear_has_state();
}
inline const ::pb::E42mcState& E42mcSolution::state() const {
  // @@protoc_insertion_point(field_get:pb.E42mcSolution.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::pb::E42mcState* E42mcSolution::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::pb::E42mcState;
  // @@protoc_insertion_point(field_mutable:pb.E42mcSolution.state)
  return state_;
}
inline ::pb::E42mcState* E42mcSolution::release_state() {
  clear_has_state();
  ::pb::E42mcState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void E42mcSolution::set_allocated_state(::pb::E42mcState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.E42mcSolution.state)
}

// optional .pb.E42mcState d_state = 2;
inline bool E42mcSolution::has_d_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E42mcSolution::set_has_d_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E42mcSolution::clear_has_d_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E42mcSolution::clear_d_state() {
  if (d_state_ != NULL) d_state_->::pb::E42mcState::Clear();
  clear_has_d_state();
}
inline const ::pb::E42mcState& E42mcSolution::d_state() const {
  // @@protoc_insertion_point(field_get:pb.E42mcSolution.d_state)
  return d_state_ != NULL ? *d_state_ : *default_instance_->d_state_;
}
inline ::pb::E42mcState* E42mcSolution::mutable_d_state() {
  set_has_d_state();
  if (d_state_ == NULL) d_state_ = new ::pb::E42mcState;
  // @@protoc_insertion_point(field_mutable:pb.E42mcSolution.d_state)
  return d_state_;
}
inline ::pb::E42mcState* E42mcSolution::release_d_state() {
  clear_has_d_state();
  ::pb::E42mcState* temp = d_state_;
  d_state_ = NULL;
  return temp;
}
inline void E42mcSolution::set_allocated_d_state(::pb::E42mcState* d_state) {
  delete d_state_;
  d_state_ = d_state;
  if (d_state) {
    set_has_d_state();
  } else {
    clear_has_d_state();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.E42mcSolution.d_state)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_5fe42mc_2eproto__INCLUDED
