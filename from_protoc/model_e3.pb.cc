// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_e3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_e3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* E3Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* E3State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3State_reflection_ = NULL;
const ::google::protobuf::Descriptor* E3State_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3State_Particles_reflection_ = NULL;
const ::google::protobuf::Descriptor* E3PetscSolverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3PetscSolverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E3Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* E3Solution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3Solution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fe3_2eproto() {
  protobuf_AddDesc_model_5fe3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_e3.proto");
  GOOGLE_CHECK(file != NULL);
  E3Config_descriptor_ = file->message_type(0);
  static const int E3Config_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, theta_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, gamma_0_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, delta_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, r_e_),
  };
  E3Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3Config_descriptor_,
      E3Config::default_instance_,
      E3Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3Config));
  E3State_descriptor_ = file->message_type(1);
  static const int E3State_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, simulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, particles_),
  };
  E3State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3State_descriptor_,
      E3State::default_instance_,
      E3State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3State));
  E3State_Particles_descriptor_ = E3State_descriptor_->nested_type(0);
  static const int E3State_Particles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State_Particles, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State_Particles, ksi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State_Particles, eta_),
  };
  E3State_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3State_Particles_descriptor_,
      E3State_Particles::default_instance_,
      E3State_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3State_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3State_Particles));
  E3PetscSolverConfig_descriptor_ = file->message_type(2);
  static const int E3PetscSolverConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3PetscSolverConfig, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3PetscSolverConfig, init_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3PetscSolverConfig, model_),
  };
  E3PetscSolverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3PetscSolverConfig_descriptor_,
      E3PetscSolverConfig::default_instance_,
      E3PetscSolverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3PetscSolverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3PetscSolverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3PetscSolverConfig));
  E3Model_descriptor_ = file->message_type(3);
  static const int E3Model_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, pconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, sconfig_),
  };
  E3Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3Model_descriptor_,
      E3Model::default_instance_,
      E3Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3Model));
  E3Solution_descriptor_ = file->message_type(4);
  static const int E3Solution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Solution, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Solution, d_state_),
  };
  E3Solution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E3Solution_descriptor_,
      E3Solution::default_instance_,
      E3Solution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Solution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3Solution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E3Solution));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fe3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3Config_descriptor_, &E3Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3State_descriptor_, &E3State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3State_Particles_descriptor_, &E3State_Particles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3PetscSolverConfig_descriptor_, &E3PetscSolverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3Model_descriptor_, &E3Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E3Solution_descriptor_, &E3Solution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fe3_2eproto() {
  delete E3Config::default_instance_;
  delete E3Config_reflection_;
  delete E3State::default_instance_;
  delete E3State_reflection_;
  delete E3State_Particles::default_instance_;
  delete E3State_Particles_reflection_;
  delete E3PetscSolverConfig::default_instance_;
  delete E3PetscSolverConfig_reflection_;
  delete E3Model::default_instance_;
  delete E3Model_reflection_;
  delete E3Solution::default_instance_;
  delete E3Solution_reflection_;
}

void protobuf_AddDesc_model_5fe3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016model_e3.proto\022\002pb\"b\n\010E3Config\022\t\n\001m\030\001 "
    "\002(\r\022\t\n\001n\030\002 \001(\001\022\017\n\007theta_e\030\003 \001(\001\022\021\n\tgamma"
    "_0_2\030\004 \001(\001\022\017\n\007delta_e\030\005 \001(\001\022\013\n\003r_e\030\006 \001(\001"
    "\"\220\001\n\007E3State\022\021\n\tsimulated\030\001 \001(\010\022\t\n\001E\030\003 \002"
    "(\001\022\013\n\003phi\030\004 \002(\001\022(\n\tparticles\030\002 \003(\n2\025.pb."
    "E3State.Particles\0320\n\tParticles\022\t\n\001a\030\003 \002("
    "\001\022\013\n\003ksi\030\004 \002(\001\022\013\n\003eta\030\005 \002(\001\"J\n\023E3PetscSo"
    "lverConfig\022\021\n\ttolerance\030\001 \001(\001\022\021\n\tinit_st"
    "ep\030\002 \001(\001\022\r\n\005model\030\003 \002(\t\"\213\001\n\007E3Model\022\014\n\004t"
    "ime\030\004 \002(\001\022\r\n\005steps\030\005 \002(\r\022\035\n\007pconfig\030\001 \002("
    "\0132\014.pb.E3Config\022\032\n\005state\030\002 \002(\0132\013.pb.E3St"
    "ate\022(\n\007sconfig\030\003 \002(\0132\027.pb.E3PetscSolverC"
    "onfig\"F\n\nE3Solution\022\032\n\005state\030\001 \002(\0132\013.pb."
    "E3State\022\034\n\007d_state\030\002 \001(\0132\013.pb.E3State", 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_e3.proto", &protobuf_RegisterTypes);
  E3Config::default_instance_ = new E3Config();
  E3State::default_instance_ = new E3State();
  E3State_Particles::default_instance_ = new E3State_Particles();
  E3PetscSolverConfig::default_instance_ = new E3PetscSolverConfig();
  E3Model::default_instance_ = new E3Model();
  E3Solution::default_instance_ = new E3Solution();
  E3Config::default_instance_->InitAsDefaultInstance();
  E3State::default_instance_->InitAsDefaultInstance();
  E3State_Particles::default_instance_->InitAsDefaultInstance();
  E3PetscSolverConfig::default_instance_->InitAsDefaultInstance();
  E3Model::default_instance_->InitAsDefaultInstance();
  E3Solution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fe3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fe3_2eproto {
  StaticDescriptorInitializer_model_5fe3_2eproto() {
    protobuf_AddDesc_model_5fe3_2eproto();
  }
} static_descriptor_initializer_model_5fe3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E3Config::kMFieldNumber;
const int E3Config::kNFieldNumber;
const int E3Config::kThetaEFieldNumber;
const int E3Config::kGamma02FieldNumber;
const int E3Config::kDeltaEFieldNumber;
const int E3Config::kREFieldNumber;
#endif  // !_MSC_VER

E3Config::E3Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3Config::InitAsDefaultInstance() {
}

E3Config::E3Config(const E3Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3Config::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0u;
  n_ = 0;
  theta_e_ = 0;
  gamma_0_2_ = 0;
  delta_e_ = 0;
  r_e_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3Config::~E3Config() {
  SharedDtor();
}

void E3Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E3Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3Config_descriptor_;
}

const E3Config& E3Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3Config* E3Config::default_instance_ = NULL;

E3Config* E3Config::New() const {
  return new E3Config;
}

void E3Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ = 0u;
    n_ = 0;
    theta_e_ = 0;
    gamma_0_2_ = 0;
    delta_e_ = 0;
    r_e_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_n;
        break;
      }

      // optional double n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_theta_e;
        break;
      }

      // optional double theta_e = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_e_)));
          set_has_theta_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gamma_0_2;
        break;
      }

      // optional double gamma_0_2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gamma_0_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_0_2_)));
          set_has_gamma_0_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_delta_e;
        break;
      }

      // optional double delta_e = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_e_)));
          set_has_delta_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_r_e;
        break;
      }

      // optional double r_e = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_e_)));
          set_has_r_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m(), output);
  }

  // optional double n = 2;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->n(), output);
  }

  // optional double theta_e = 3;
  if (has_theta_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta_e(), output);
  }

  // optional double gamma_0_2 = 4;
  if (has_gamma_0_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gamma_0_2(), output);
  }

  // optional double delta_e = 5;
  if (has_delta_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delta_e(), output);
  }

  // optional double r_e = 6;
  if (has_r_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->r_e(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m(), target);
  }

  // optional double n = 2;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->n(), target);
  }

  // optional double theta_e = 3;
  if (has_theta_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta_e(), target);
  }

  // optional double gamma_0_2 = 4;
  if (has_gamma_0_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gamma_0_2(), target);
  }

  // optional double delta_e = 5;
  if (has_delta_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delta_e(), target);
  }

  // optional double r_e = 6;
  if (has_r_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->r_e(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m());
    }

    // optional double n = 2;
    if (has_n()) {
      total_size += 1 + 8;
    }

    // optional double theta_e = 3;
    if (has_theta_e()) {
      total_size += 1 + 8;
    }

    // optional double gamma_0_2 = 4;
    if (has_gamma_0_2()) {
      total_size += 1 + 8;
    }

    // optional double delta_e = 5;
    if (has_delta_e()) {
      total_size += 1 + 8;
    }

    // optional double r_e = 6;
    if (has_r_e()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3Config::MergeFrom(const E3Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_theta_e()) {
      set_theta_e(from.theta_e());
    }
    if (from.has_gamma_0_2()) {
      set_gamma_0_2(from.gamma_0_2());
    }
    if (from.has_delta_e()) {
      set_delta_e(from.delta_e());
    }
    if (from.has_r_e()) {
      set_r_e(from.r_e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3Config::CopyFrom(const E3Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void E3Config::Swap(E3Config* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(n_, other->n_);
    std::swap(theta_e_, other->theta_e_);
    std::swap(gamma_0_2_, other->gamma_0_2_);
    std::swap(delta_e_, other->delta_e_);
    std::swap(r_e_, other->r_e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3Config_descriptor_;
  metadata.reflection = E3Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E3State_Particles::kAFieldNumber;
const int E3State_Particles::kKsiFieldNumber;
const int E3State_Particles::kEtaFieldNumber;
#endif  // !_MSC_VER

E3State_Particles::E3State_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3State_Particles::InitAsDefaultInstance() {
}

E3State_Particles::E3State_Particles(const E3State_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3State_Particles::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ksi_ = 0;
  eta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3State_Particles::~E3State_Particles() {
  SharedDtor();
}

void E3State_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E3State_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3State_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3State_Particles_descriptor_;
}

const E3State_Particles& E3State_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3State_Particles* E3State_Particles::default_instance_ = NULL;

E3State_Particles* E3State_Particles::New() const {
  return new E3State_Particles;
}

void E3State_Particles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
    ksi_ = 0;
    eta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3State_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ksi;
        break;
      }

      // required double ksi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ksi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ksi_)));
          set_has_ksi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_eta;
        break;
      }

      // required double eta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3State_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double a = 3;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // required double ksi = 4;
  if (has_ksi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ksi(), output);
  }

  // required double eta = 5;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->eta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3State_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double a = 3;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // required double ksi = 4;
  if (has_ksi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ksi(), target);
  }

  // required double eta = 5;
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->eta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3State_Particles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // required double ksi = 4;
    if (has_ksi()) {
      total_size += 1 + 8;
    }

    // required double eta = 5;
    if (has_eta()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3State_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3State_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3State_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3State_Particles::MergeFrom(const E3State_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_ksi()) {
      set_ksi(from.ksi());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3State_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3State_Particles::CopyFrom(const E3State_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3State_Particles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void E3State_Particles::Swap(E3State_Particles* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(ksi_, other->ksi_);
    std::swap(eta_, other->eta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3State_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3State_Particles_descriptor_;
  metadata.reflection = E3State_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E3State::kSimulatedFieldNumber;
const int E3State::kEFieldNumber;
const int E3State::kPhiFieldNumber;
const int E3State::kParticlesFieldNumber;
#endif  // !_MSC_VER

E3State::E3State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3State::InitAsDefaultInstance() {
}

E3State::E3State(const E3State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3State::SharedCtor() {
  _cached_size_ = 0;
  simulated_ = false;
  e_ = 0;
  phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3State::~E3State() {
  SharedDtor();
}

void E3State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E3State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3State_descriptor_;
}

const E3State& E3State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3State* E3State::default_instance_ = NULL;

E3State* E3State::New() const {
  return new E3State;
}

void E3State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    simulated_ = false;
    e_ = 0;
    phi_ = 0;
  }
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool simulated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulated_)));
          set_has_simulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_particles;
        break;
      }

      // repeated group Particles = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_particles;
        if (input->ExpectTag(25)) goto parse_E;
        break;
      }

      // required double E = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_E:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_phi;
        break;
      }

      // required double phi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool simulated = 1;
  if (has_simulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->simulated(), output);
  }

  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->particles(i), output);
  }

  // required double E = 3;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->e(), output);
  }

  // required double phi = 4;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->phi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool simulated = 1;
  if (has_simulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->simulated(), target);
  }

  // repeated group Particles = 2 {
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->particles(i), target);
  }

  // required double E = 3;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->e(), target);
  }

  // required double phi = 4;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->phi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool simulated = 1;
    if (has_simulated()) {
      total_size += 1 + 1;
    }

    // required double E = 3;
    if (has_e()) {
      total_size += 1 + 8;
    }

    // required double phi = 4;
    if (has_phi()) {
      total_size += 1 + 8;
    }

  }
  // repeated group Particles = 2 {
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->particles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3State::MergeFrom(const E3State& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simulated()) {
      set_simulated(from.simulated());
    }
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3State::CopyFrom(const E3State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void E3State::Swap(E3State* other) {
  if (other != this) {
    std::swap(simulated_, other->simulated_);
    std::swap(e_, other->e_);
    std::swap(phi_, other->phi_);
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3State_descriptor_;
  metadata.reflection = E3State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E3PetscSolverConfig::kToleranceFieldNumber;
const int E3PetscSolverConfig::kInitStepFieldNumber;
const int E3PetscSolverConfig::kModelFieldNumber;
#endif  // !_MSC_VER

E3PetscSolverConfig::E3PetscSolverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3PetscSolverConfig::InitAsDefaultInstance() {
}

E3PetscSolverConfig::E3PetscSolverConfig(const E3PetscSolverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3PetscSolverConfig::SharedCtor() {
  _cached_size_ = 0;
  tolerance_ = 0;
  init_step_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3PetscSolverConfig::~E3PetscSolverConfig() {
  SharedDtor();
}

void E3PetscSolverConfig::SharedDtor() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

void E3PetscSolverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3PetscSolverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3PetscSolverConfig_descriptor_;
}

const E3PetscSolverConfig& E3PetscSolverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3PetscSolverConfig* E3PetscSolverConfig::default_instance_ = NULL;

E3PetscSolverConfig* E3PetscSolverConfig::New() const {
  return new E3PetscSolverConfig;
}

void E3PetscSolverConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tolerance_ = 0;
    init_step_ = 0;
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3PetscSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tolerance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_init_step;
        break;
      }

      // optional double init_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_init_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_step_)));
          set_has_init_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // required string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3PetscSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double tolerance = 1;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tolerance(), output);
  }

  // optional double init_step = 2;
  if (has_init_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->init_step(), output);
  }

  // required string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3PetscSolverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tolerance = 1;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tolerance(), target);
  }

  // optional double init_step = 2;
  if (has_init_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->init_step(), target);
  }

  // required string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3PetscSolverConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tolerance = 1;
    if (has_tolerance()) {
      total_size += 1 + 8;
    }

    // optional double init_step = 2;
    if (has_init_step()) {
      total_size += 1 + 8;
    }

    // required string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3PetscSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3PetscSolverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3PetscSolverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3PetscSolverConfig::MergeFrom(const E3PetscSolverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_init_step()) {
      set_init_step(from.init_step());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3PetscSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3PetscSolverConfig::CopyFrom(const E3PetscSolverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3PetscSolverConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void E3PetscSolverConfig::Swap(E3PetscSolverConfig* other) {
  if (other != this) {
    std::swap(tolerance_, other->tolerance_);
    std::swap(init_step_, other->init_step_);
    std::swap(model_, other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3PetscSolverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3PetscSolverConfig_descriptor_;
  metadata.reflection = E3PetscSolverConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E3Model::kTimeFieldNumber;
const int E3Model::kStepsFieldNumber;
const int E3Model::kPconfigFieldNumber;
const int E3Model::kStateFieldNumber;
const int E3Model::kSconfigFieldNumber;
#endif  // !_MSC_VER

E3Model::E3Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3Model::InitAsDefaultInstance() {
  pconfig_ = const_cast< ::pb::E3Config*>(&::pb::E3Config::default_instance());
  state_ = const_cast< ::pb::E3State*>(&::pb::E3State::default_instance());
  sconfig_ = const_cast< ::pb::E3PetscSolverConfig*>(&::pb::E3PetscSolverConfig::default_instance());
}

E3Model::E3Model(const E3Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3Model::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  steps_ = 0u;
  pconfig_ = NULL;
  state_ = NULL;
  sconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3Model::~E3Model() {
  SharedDtor();
}

void E3Model::SharedDtor() {
  if (this != default_instance_) {
    delete pconfig_;
    delete state_;
    delete sconfig_;
  }
}

void E3Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3Model_descriptor_;
}

const E3Model& E3Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3Model* E3Model::default_instance_ = NULL;

E3Model* E3Model::New() const {
  return new E3Model;
}

void E3Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    steps_ = 0u;
    if (has_pconfig()) {
      if (pconfig_ != NULL) pconfig_->::pb::E3Config::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E3State::Clear();
    }
    if (has_sconfig()) {
      if (sconfig_ != NULL) sconfig_->::pb::E3PetscSolverConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E3Config pconfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required .pb.E3State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sconfig;
        break;
      }

      // required .pb.E3PetscSolverConfig sconfig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time;
        break;
      }

      // required double time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_steps;
        break;
      }

      // required uint32 steps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_)));
          set_has_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.E3Config pconfig = 1;
  if (has_pconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pconfig(), output);
  }

  // required .pb.E3State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  // required .pb.E3PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sconfig(), output);
  }

  // required double time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time(), output);
  }

  // required uint32 steps = 5;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->steps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.E3Config pconfig = 1;
  if (has_pconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pconfig(), target);
  }

  // required .pb.E3State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  // required .pb.E3PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sconfig(), target);
  }

  // required double time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time(), target);
  }

  // required uint32 steps = 5;
  if (has_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->steps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time = 4;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // required uint32 steps = 5;
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steps());
    }

    // required .pb.E3Config pconfig = 1;
    if (has_pconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pconfig());
    }

    // required .pb.E3State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // required .pb.E3PetscSolverConfig sconfig = 3;
    if (has_sconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3Model::MergeFrom(const E3Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
    if (from.has_pconfig()) {
      mutable_pconfig()->::pb::E3Config::MergeFrom(from.pconfig());
    }
    if (from.has_state()) {
      mutable_state()->::pb::E3State::MergeFrom(from.state());
    }
    if (from.has_sconfig()) {
      mutable_sconfig()->::pb::E3PetscSolverConfig::MergeFrom(from.sconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3Model::CopyFrom(const E3Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_pconfig()) {
    if (!this->pconfig().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_sconfig()) {
    if (!this->sconfig().IsInitialized()) return false;
  }
  return true;
}

void E3Model::Swap(E3Model* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(steps_, other->steps_);
    std::swap(pconfig_, other->pconfig_);
    std::swap(state_, other->state_);
    std::swap(sconfig_, other->sconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3Model_descriptor_;
  metadata.reflection = E3Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E3Solution::kStateFieldNumber;
const int E3Solution::kDStateFieldNumber;
#endif  // !_MSC_VER

E3Solution::E3Solution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E3Solution::InitAsDefaultInstance() {
  state_ = const_cast< ::pb::E3State*>(&::pb::E3State::default_instance());
  d_state_ = const_cast< ::pb::E3State*>(&::pb::E3State::default_instance());
}

E3Solution::E3Solution(const E3Solution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E3Solution::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  d_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E3Solution::~E3Solution() {
  SharedDtor();
}

void E3Solution::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete d_state_;
  }
}

void E3Solution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3Solution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3Solution_descriptor_;
}

const E3Solution& E3Solution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe3_2eproto();
  return *default_instance_;
}

E3Solution* E3Solution::default_instance_ = NULL;

E3Solution* E3Solution::New() const {
  return new E3Solution;
}

void E3Solution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E3State::Clear();
    }
    if (has_d_state()) {
      if (d_state_ != NULL) d_state_->::pb::E3State::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E3Solution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E3State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_d_state;
        break;
      }

      // optional .pb.E3State d_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E3Solution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.E3State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .pb.E3State d_state = 2;
  if (has_d_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->d_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E3Solution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.E3State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .pb.E3State d_state = 2;
  if (has_d_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->d_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E3Solution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E3State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .pb.E3State d_state = 2;
    if (has_d_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3Solution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E3Solution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E3Solution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E3Solution::MergeFrom(const E3Solution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::pb::E3State::MergeFrom(from.state());
    }
    if (from.has_d_state()) {
      mutable_d_state()->::pb::E3State::MergeFrom(from.d_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E3Solution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3Solution::CopyFrom(const E3Solution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3Solution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_d_state()) {
    if (!this->d_state().IsInitialized()) return false;
  }
  return true;
}

void E3Solution::Swap(E3Solution* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(d_state_, other->d_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E3Solution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3Solution_descriptor_;
  metadata.reflection = E3Solution_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
