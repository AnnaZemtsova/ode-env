// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_astro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_astro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* AstroConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstroConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstroState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstroState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstroSolverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstroSolverConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fastro_2eproto() {
  protobuf_AddDesc_model_5fastro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_astro.proto");
  GOOGLE_CHECK(file != NULL);
  AstroConfig_descriptor_ = file->message_type(0);
  static const int AstroConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroConfig, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroConfig, gamma_),
  };
  AstroConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstroConfig_descriptor_,
      AstroConfig::default_instance_,
      AstroConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstroConfig));
  AstroState_descriptor_ = file->message_type(1);
  static const int AstroState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroState, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroState, n_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroState, n_c_),
  };
  AstroState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstroState_descriptor_,
      AstroState::default_instance_,
      AstroState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstroState));
  AstroSolverConfig_descriptor_ = file->message_type(2);
  static const int AstroSolverConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroSolverConfig, step_),
  };
  AstroSolverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstroSolverConfig_descriptor_,
      AstroSolverConfig::default_instance_,
      AstroSolverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroSolverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstroSolverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstroSolverConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fastro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstroConfig_descriptor_, &AstroConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstroState_descriptor_, &AstroState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstroSolverConfig_descriptor_, &AstroSolverConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fastro_2eproto() {
  delete AstroConfig::default_instance_;
  delete AstroConfig_reflection_;
  delete AstroState::default_instance_;
  delete AstroState_reflection_;
  delete AstroSolverConfig::default_instance_;
  delete AstroSolverConfig_reflection_;
}

void protobuf_AddDesc_model_5fastro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021model_astro.proto\022\002pb\"+\n\013AstroConfig\022\r"
    "\n\005theta\030\001 \002(\001\022\r\n\005Gamma\030\002 \002(\001\"3\n\nAstroSta"
    "te\022\t\n\001M\030\001 \002(\001\022\r\n\005N_inc\030\002 \002(\001\022\013\n\003N_c\030\003 \002("
    "\001\"!\n\021AstroSolverConfig\022\014\n\004step\030\001 \002(\001", 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_astro.proto", &protobuf_RegisterTypes);
  AstroConfig::default_instance_ = new AstroConfig();
  AstroState::default_instance_ = new AstroState();
  AstroSolverConfig::default_instance_ = new AstroSolverConfig();
  AstroConfig::default_instance_->InitAsDefaultInstance();
  AstroState::default_instance_->InitAsDefaultInstance();
  AstroSolverConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fastro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fastro_2eproto {
  StaticDescriptorInitializer_model_5fastro_2eproto() {
    protobuf_AddDesc_model_5fastro_2eproto();
  }
} static_descriptor_initializer_model_5fastro_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AstroConfig::kThetaFieldNumber;
const int AstroConfig::kGammaFieldNumber;
#endif  // !_MSC_VER

AstroConfig::AstroConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AstroConfig)
}

void AstroConfig::InitAsDefaultInstance() {
}

AstroConfig::AstroConfig(const AstroConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AstroConfig)
}

void AstroConfig::SharedCtor() {
  _cached_size_ = 0;
  theta_ = 0;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstroConfig::~AstroConfig() {
  // @@protoc_insertion_point(destructor:pb.AstroConfig)
  SharedDtor();
}

void AstroConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstroConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstroConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstroConfig_descriptor_;
}

const AstroConfig& AstroConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fastro_2eproto();
  return *default_instance_;
}

AstroConfig* AstroConfig::default_instance_ = NULL;

AstroConfig* AstroConfig::New() const {
  return new AstroConfig;
}

void AstroConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AstroConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(theta_, gamma_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstroConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AstroConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double theta = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Gamma;
        break;
      }

      // required double Gamma = 2;
      case 2: {
        if (tag == 17) {
         parse_Gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AstroConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AstroConfig)
  return false;
#undef DO_
}

void AstroConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AstroConfig)
  // required double theta = 1;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->theta(), output);
  }

  // required double Gamma = 2;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gamma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AstroConfig)
}

::google::protobuf::uint8* AstroConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AstroConfig)
  // required double theta = 1;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->theta(), target);
  }

  // required double Gamma = 2;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gamma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AstroConfig)
  return target;
}

int AstroConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double theta = 1;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // required double Gamma = 2;
    if (has_gamma()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstroConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstroConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstroConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstroConfig::MergeFrom(const AstroConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstroConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstroConfig::CopyFrom(const AstroConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstroConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AstroConfig::Swap(AstroConfig* other) {
  if (other != this) {
    std::swap(theta_, other->theta_);
    std::swap(gamma_, other->gamma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstroConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstroConfig_descriptor_;
  metadata.reflection = AstroConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstroState::kMFieldNumber;
const int AstroState::kNIncFieldNumber;
const int AstroState::kNCFieldNumber;
#endif  // !_MSC_VER

AstroState::AstroState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AstroState)
}

void AstroState::InitAsDefaultInstance() {
}

AstroState::AstroState(const AstroState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AstroState)
}

void AstroState::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0;
  n_inc_ = 0;
  n_c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstroState::~AstroState() {
  // @@protoc_insertion_point(destructor:pb.AstroState)
  SharedDtor();
}

void AstroState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstroState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstroState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstroState_descriptor_;
}

const AstroState& AstroState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fastro_2eproto();
  return *default_instance_;
}

AstroState* AstroState::default_instance_ = NULL;

AstroState* AstroState::New() const {
  return new AstroState;
}

void AstroState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AstroState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_, n_c_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstroState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AstroState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double M = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_N_inc;
        break;
      }

      // required double N_inc = 2;
      case 2: {
        if (tag == 17) {
         parse_N_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_inc_)));
          set_has_n_inc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_N_c;
        break;
      }

      // required double N_c = 3;
      case 3: {
        if (tag == 25) {
         parse_N_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_c_)));
          set_has_n_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AstroState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AstroState)
  return false;
#undef DO_
}

void AstroState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AstroState)
  // required double M = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->m(), output);
  }

  // required double N_inc = 2;
  if (has_n_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->n_inc(), output);
  }

  // required double N_c = 3;
  if (has_n_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->n_c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AstroState)
}

::google::protobuf::uint8* AstroState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AstroState)
  // required double M = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->m(), target);
  }

  // required double N_inc = 2;
  if (has_n_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->n_inc(), target);
  }

  // required double N_c = 3;
  if (has_n_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->n_c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AstroState)
  return target;
}

int AstroState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double M = 1;
    if (has_m()) {
      total_size += 1 + 8;
    }

    // required double N_inc = 2;
    if (has_n_inc()) {
      total_size += 1 + 8;
    }

    // required double N_c = 3;
    if (has_n_c()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstroState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstroState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstroState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstroState::MergeFrom(const AstroState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_n_inc()) {
      set_n_inc(from.n_inc());
    }
    if (from.has_n_c()) {
      set_n_c(from.n_c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstroState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstroState::CopyFrom(const AstroState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstroState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AstroState::Swap(AstroState* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(n_inc_, other->n_inc_);
    std::swap(n_c_, other->n_c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstroState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstroState_descriptor_;
  metadata.reflection = AstroState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstroSolverConfig::kStepFieldNumber;
#endif  // !_MSC_VER

AstroSolverConfig::AstroSolverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AstroSolverConfig)
}

void AstroSolverConfig::InitAsDefaultInstance() {
}

AstroSolverConfig::AstroSolverConfig(const AstroSolverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AstroSolverConfig)
}

void AstroSolverConfig::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstroSolverConfig::~AstroSolverConfig() {
  // @@protoc_insertion_point(destructor:pb.AstroSolverConfig)
  SharedDtor();
}

void AstroSolverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstroSolverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstroSolverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstroSolverConfig_descriptor_;
}

const AstroSolverConfig& AstroSolverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fastro_2eproto();
  return *default_instance_;
}

AstroSolverConfig* AstroSolverConfig::default_instance_ = NULL;

AstroSolverConfig* AstroSolverConfig::New() const {
  return new AstroSolverConfig;
}

void AstroSolverConfig::Clear() {
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstroSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AstroSolverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double step = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AstroSolverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AstroSolverConfig)
  return false;
#undef DO_
}

void AstroSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AstroSolverConfig)
  // required double step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AstroSolverConfig)
}

::google::protobuf::uint8* AstroSolverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AstroSolverConfig)
  // required double step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AstroSolverConfig)
  return target;
}

int AstroSolverConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double step = 1;
    if (has_step()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstroSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstroSolverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstroSolverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstroSolverConfig::MergeFrom(const AstroSolverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstroSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstroSolverConfig::CopyFrom(const AstroSolverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstroSolverConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AstroSolverConfig::Swap(AstroSolverConfig* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstroSolverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstroSolverConfig_descriptor_;
  metadata.reflection = AstroSolverConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
