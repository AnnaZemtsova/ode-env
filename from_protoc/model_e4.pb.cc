// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_e4.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model_e4.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* E4Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4State_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4State_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4State_Particles_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4PetscSolverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4PetscSolverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4Solution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4Solution_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4Special_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4Special_reflection_ = NULL;
const ::google::protobuf::Descriptor* E4Special_Hist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E4Special_Hist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_5fe4_2eproto() {
  protobuf_AddDesc_model_5fe4_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model_e4.proto");
  GOOGLE_CHECK(file != NULL);
  E4Config_descriptor_ = file->message_type(0);
  static const int E4Config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Config, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Config, delta_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Config, alpha_),
  };
  E4Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4Config_descriptor_,
      E4Config::default_instance_,
      E4Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4Config));
  E4State_descriptor_ = file->message_type(1);
  static const int E4State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State, particles_),
  };
  E4State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4State_descriptor_,
      E4State::default_instance_,
      E4State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4State));
  E4State_Particles_descriptor_ = E4State_descriptor_->nested_type(0);
  static const int E4State_Particles_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, psi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, delta_),
  };
  E4State_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4State_Particles_descriptor_,
      E4State_Particles::default_instance_,
      E4State_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4State_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4State_Particles));
  E4PetscSolverConfig_descriptor_ = file->message_type(2);
  static const int E4PetscSolverConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, atol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, rtol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, init_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, n_cores_),
  };
  E4PetscSolverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4PetscSolverConfig_descriptor_,
      E4PetscSolverConfig::default_instance_,
      E4PetscSolverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4PetscSolverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4PetscSolverConfig));
  E4Model_descriptor_ = file->message_type(3);
  static const int E4Model_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Model, pconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Model, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Model, sconfig_),
  };
  E4Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4Model_descriptor_,
      E4Model::default_instance_,
      E4Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4Model));
  E4Solution_descriptor_ = file->message_type(4);
  static const int E4Solution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Solution, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Solution, d_state_),
  };
  E4Solution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4Solution_descriptor_,
      E4Solution::default_instance_,
      E4Solution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Solution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Solution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4Solution));
  E4Special_descriptor_ = file->message_type(5);
  static const int E4Special_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, e_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, aver_a_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, int_e_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, na_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, nb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, ia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, ib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, ia_aver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, ib_aver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, wa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, wb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, hist_),
  };
  E4Special_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4Special_descriptor_,
      E4Special::default_instance_,
      E4Special_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4Special));
  E4Special_Hist_descriptor_ = E4Special_descriptor_->nested_type(0);
  static const int E4Special_Hist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special_Hist, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special_Hist, y_),
  };
  E4Special_Hist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E4Special_Hist_descriptor_,
      E4Special_Hist::default_instance_,
      E4Special_Hist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special_Hist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E4Special_Hist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E4Special_Hist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_5fe4_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4Config_descriptor_, &E4Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4State_descriptor_, &E4State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4State_Particles_descriptor_, &E4State_Particles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4PetscSolverConfig_descriptor_, &E4PetscSolverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4Model_descriptor_, &E4Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4Solution_descriptor_, &E4Solution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4Special_descriptor_, &E4Special::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E4Special_Hist_descriptor_, &E4Special_Hist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_5fe4_2eproto() {
  delete E4Config::default_instance_;
  delete E4Config_reflection_;
  delete E4State::default_instance_;
  delete E4State_reflection_;
  delete E4State_Particles::default_instance_;
  delete E4State_Particles_reflection_;
  delete E4PetscSolverConfig::default_instance_;
  delete E4PetscSolverConfig_reflection_;
  delete E4Model::default_instance_;
  delete E4Model_reflection_;
  delete E4Solution::default_instance_;
  delete E4Solution_reflection_;
  delete E4Special::default_instance_;
  delete E4Special_reflection_;
  delete E4Special_Hist::default_instance_;
  delete E4Special_Hist_reflection_;
}

void protobuf_AddDesc_model_5fe4_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016model_e4.proto\022\002pb\"5\n\010E4Config\022\t\n\001N\030\001 "
    "\002(\r\022\017\n\007delta_0\030\002 \001(\001\022\r\n\005alpha\030\003 \001(\001\"\212\001\n\007"
    "E4State\022\t\n\001E\030\001 \002(\001\022\013\n\003phi\030\002 \002(\001\022(\n\tparti"
    "cles\030\003 \003(\n2\025.pb.E4State.Particles\032=\n\tPar"
    "ticles\022\t\n\001a\030\004 \002(\001\022\013\n\003psi\030\005 \002(\001\022\t\n\001z\030\006 \002("
    "\001\022\r\n\005delta\030\007 \002(\001\"U\n\023E4PetscSolverConfig\022"
    "\014\n\004atol\030\001 \001(\001\022\014\n\004rtol\030\002 \001(\001\022\021\n\tinit_step"
    "\030\003 \001(\001\022\017\n\007n_cores\030\004 \001(\005\"n\n\007E4Model\022\035\n\007pc"
    "onfig\030\001 \002(\0132\014.pb.E4Config\022\032\n\005state\030\002 \002(\013"
    "2\013.pb.E4State\022(\n\007sconfig\030\003 \002(\0132\027.pb.E4Pe"
    "tscSolverConfig\"F\n\nE4Solution\022\032\n\005state\030\001"
    " \002(\0132\013.pb.E4State\022\034\n\007d_state\030\002 \001(\0132\013.pb."
    "E4State\"\373\001\n\tE4Special\022\013\n\003e_2\030\001 \001(\001\022\020\n\010av"
    "er_a_2\030\002 \001(\001\022\017\n\007int_e_a\030\004 \001(\001\022\n\n\002Na\030\005 \001("
    "\001\022\n\n\002Nb\030\006 \001(\001\022\t\n\001M\030\021 \001(\001\022\t\n\001N\030\022 \001(\001\022\n\n\002I"
    "a\030\007 \001(\001\022\n\n\002Ib\030\010 \001(\001\022\017\n\007Ia_aver\030\t \001(\001\022\017\n\007"
    "Ib_aver\030\n \001(\001\022\n\n\002Wa\030\013 \001(\001\022\n\n\002Wb\030\014 \001(\001\022 \n"
    "\004hist\030\r \003(\n2\022.pb.E4Special.Hist\032\034\n\004Hist\022"
    "\t\n\001x\030\016 \002(\001\022\t\n\001y\030\017 \002(\001", 741);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model_e4.proto", &protobuf_RegisterTypes);
  E4Config::default_instance_ = new E4Config();
  E4State::default_instance_ = new E4State();
  E4State_Particles::default_instance_ = new E4State_Particles();
  E4PetscSolverConfig::default_instance_ = new E4PetscSolverConfig();
  E4Model::default_instance_ = new E4Model();
  E4Solution::default_instance_ = new E4Solution();
  E4Special::default_instance_ = new E4Special();
  E4Special_Hist::default_instance_ = new E4Special_Hist();
  E4Config::default_instance_->InitAsDefaultInstance();
  E4State::default_instance_->InitAsDefaultInstance();
  E4State_Particles::default_instance_->InitAsDefaultInstance();
  E4PetscSolverConfig::default_instance_->InitAsDefaultInstance();
  E4Model::default_instance_->InitAsDefaultInstance();
  E4Solution::default_instance_->InitAsDefaultInstance();
  E4Special::default_instance_->InitAsDefaultInstance();
  E4Special_Hist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_5fe4_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_5fe4_2eproto {
  StaticDescriptorInitializer_model_5fe4_2eproto() {
    protobuf_AddDesc_model_5fe4_2eproto();
  }
} static_descriptor_initializer_model_5fe4_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E4Config::kNFieldNumber;
const int E4Config::kDelta0FieldNumber;
const int E4Config::kAlphaFieldNumber;
#endif  // !_MSC_VER

E4Config::E4Config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4Config)
}

void E4Config::InitAsDefaultInstance() {
}

E4Config::E4Config(const E4Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4Config)
}

void E4Config::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0u;
  delta_0_ = 0;
  alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4Config::~E4Config() {
  // @@protoc_insertion_point(destructor:pb.E4Config)
  SharedDtor();
}

void E4Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4Config_descriptor_;
}

const E4Config& E4Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4Config* E4Config::default_instance_ = NULL;

E4Config* E4Config::New() const {
  return new E4Config;
}

void E4Config::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4Config*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delta_0_, n_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_delta_0;
        break;
      }

      // optional double delta_0 = 2;
      case 2: {
        if (tag == 17) {
         parse_delta_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_0_)));
          set_has_delta_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alpha;
        break;
      }

      // optional double alpha = 3;
      case 3: {
        if (tag == 25) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4Config)
  return false;
#undef DO_
}

void E4Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4Config)
  // required uint32 N = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n(), output);
  }

  // optional double delta_0 = 2;
  if (has_delta_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delta_0(), output);
  }

  // optional double alpha = 3;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alpha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4Config)
}

::google::protobuf::uint8* E4Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4Config)
  // required uint32 N = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n(), target);
  }

  // optional double delta_0 = 2;
  if (has_delta_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delta_0(), target);
  }

  // optional double alpha = 3;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->alpha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4Config)
  return target;
}

int E4Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 N = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n());
    }

    // optional double delta_0 = 2;
    if (has_delta_0()) {
      total_size += 1 + 8;
    }

    // optional double alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4Config::MergeFrom(const E4Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_delta_0()) {
      set_delta_0(from.delta_0());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4Config::CopyFrom(const E4Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void E4Config::Swap(E4Config* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(delta_0_, other->delta_0_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4Config_descriptor_;
  metadata.reflection = E4Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4State_Particles::kAFieldNumber;
const int E4State_Particles::kPsiFieldNumber;
const int E4State_Particles::kZFieldNumber;
const int E4State_Particles::kDeltaFieldNumber;
#endif  // !_MSC_VER

E4State_Particles::E4State_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4State.Particles)
}

void E4State_Particles::InitAsDefaultInstance() {
}

E4State_Particles::E4State_Particles(const E4State_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4State.Particles)
}

void E4State_Particles::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  psi_ = 0;
  z_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4State_Particles::~E4State_Particles() {
  // @@protoc_insertion_point(destructor:pb.E4State.Particles)
  SharedDtor();
}

void E4State_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4State_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4State_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4State_Particles_descriptor_;
}

const E4State_Particles& E4State_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4State_Particles* E4State_Particles::default_instance_ = NULL;

E4State_Particles* E4State_Particles::New() const {
  return new E4State_Particles;
}

void E4State_Particles::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4State_Particles*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_, delta_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4State_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4State.Particles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double a = 4;
      case 4: {
        if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_psi;
        break;
      }

      // required double psi = 5;
      case 5: {
        if (tag == 41) {
         parse_psi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &psi_)));
          set_has_psi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z;
        break;
      }

      // required double z = 6;
      case 6: {
        if (tag == 49) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_delta;
        break;
      }

      // required double delta = 7;
      case 7: {
        if (tag == 57) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4State.Particles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4State.Particles)
  return false;
#undef DO_
}

void E4State_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4State.Particles)
  // required double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // required double psi = 5;
  if (has_psi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->psi(), output);
  }

  // required double z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z(), output);
  }

  // required double delta = 7;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4State.Particles)
}

::google::protobuf::uint8* E4State_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4State.Particles)
  // required double a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // required double psi = 5;
  if (has_psi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->psi(), target);
  }

  // required double z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z(), target);
  }

  // required double delta = 7;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4State.Particles)
  return target;
}

int E4State_Particles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // required double psi = 5;
    if (has_psi()) {
      total_size += 1 + 8;
    }

    // required double z = 6;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double delta = 7;
    if (has_delta()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4State_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4State_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4State_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4State_Particles::MergeFrom(const E4State_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_psi()) {
      set_psi(from.psi());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4State_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4State_Particles::CopyFrom(const E4State_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4State_Particles::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void E4State_Particles::Swap(E4State_Particles* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(psi_, other->psi_);
    std::swap(z_, other->z_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4State_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4State_Particles_descriptor_;
  metadata.reflection = E4State_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E4State::kEFieldNumber;
const int E4State::kPhiFieldNumber;
const int E4State::kParticlesFieldNumber;
#endif  // !_MSC_VER

E4State::E4State()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4State)
}

void E4State::InitAsDefaultInstance() {
}

E4State::E4State(const E4State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4State)
}

void E4State::SharedCtor() {
  _cached_size_ = 0;
  e_ = 0;
  phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4State::~E4State() {
  // @@protoc_insertion_point(destructor:pb.E4State)
  SharedDtor();
}

void E4State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4State_descriptor_;
}

const E4State& E4State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4State* E4State::default_instance_ = NULL;

E4State* E4State::New() const {
  return new E4State;
}

void E4State::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4State*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(e_, phi_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double E = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_phi;
        break;
      }

      // required double phi = 2;
      case 2: {
        if (tag == 17) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_particles;
        break;
      }

      // repeated group Particles = 3 {
      case 3: {
        if (tag == 27) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                3, input, add_particles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_particles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4State)
  return false;
#undef DO_
}

void E4State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4State)
  // required double E = 1;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e(), output);
  }

  // required double phi = 2;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi(), output);
  }

  // repeated group Particles = 3 {
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3, this->particles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4State)
}

::google::protobuf::uint8* E4State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4State)
  // required double E = 1;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e(), target);
  }

  // required double phi = 2;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi(), target);
  }

  // repeated group Particles = 3 {
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        3, this->particles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4State)
  return target;
}

int E4State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double E = 1;
    if (has_e()) {
      total_size += 1 + 8;
    }

    // required double phi = 2;
    if (has_phi()) {
      total_size += 1 + 8;
    }

  }
  // repeated group Particles = 3 {
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->particles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4State::MergeFrom(const E4State& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4State::CopyFrom(const E4State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->particles())) return false;
  return true;
}

void E4State::Swap(E4State* other) {
  if (other != this) {
    std::swap(e_, other->e_);
    std::swap(phi_, other->phi_);
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4State_descriptor_;
  metadata.reflection = E4State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4PetscSolverConfig::kAtolFieldNumber;
const int E4PetscSolverConfig::kRtolFieldNumber;
const int E4PetscSolverConfig::kInitStepFieldNumber;
const int E4PetscSolverConfig::kNCoresFieldNumber;
#endif  // !_MSC_VER

E4PetscSolverConfig::E4PetscSolverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4PetscSolverConfig)
}

void E4PetscSolverConfig::InitAsDefaultInstance() {
}

E4PetscSolverConfig::E4PetscSolverConfig(const E4PetscSolverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4PetscSolverConfig)
}

void E4PetscSolverConfig::SharedCtor() {
  _cached_size_ = 0;
  atol_ = 0;
  rtol_ = 0;
  init_step_ = 0;
  n_cores_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4PetscSolverConfig::~E4PetscSolverConfig() {
  // @@protoc_insertion_point(destructor:pb.E4PetscSolverConfig)
  SharedDtor();
}

void E4PetscSolverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4PetscSolverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4PetscSolverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4PetscSolverConfig_descriptor_;
}

const E4PetscSolverConfig& E4PetscSolverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4PetscSolverConfig* E4PetscSolverConfig::default_instance_ = NULL;

E4PetscSolverConfig* E4PetscSolverConfig::New() const {
  return new E4PetscSolverConfig;
}

void E4PetscSolverConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4PetscSolverConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(atol_, n_cores_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4PetscSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4PetscSolverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double atol = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atol_)));
          set_has_atol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rtol;
        break;
      }

      // optional double rtol = 2;
      case 2: {
        if (tag == 17) {
         parse_rtol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtol_)));
          set_has_rtol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_init_step;
        break;
      }

      // optional double init_step = 3;
      case 3: {
        if (tag == 25) {
         parse_init_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_step_)));
          set_has_init_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_n_cores;
        break;
      }

      // optional int32 n_cores = 4;
      case 4: {
        if (tag == 32) {
         parse_n_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_cores_)));
          set_has_n_cores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4PetscSolverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4PetscSolverConfig)
  return false;
#undef DO_
}

void E4PetscSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4PetscSolverConfig)
  // optional double atol = 1;
  if (has_atol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->atol(), output);
  }

  // optional double rtol = 2;
  if (has_rtol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rtol(), output);
  }

  // optional double init_step = 3;
  if (has_init_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_step(), output);
  }

  // optional int32 n_cores = 4;
  if (has_n_cores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->n_cores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4PetscSolverConfig)
}

::google::protobuf::uint8* E4PetscSolverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4PetscSolverConfig)
  // optional double atol = 1;
  if (has_atol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->atol(), target);
  }

  // optional double rtol = 2;
  if (has_rtol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rtol(), target);
  }

  // optional double init_step = 3;
  if (has_init_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_step(), target);
  }

  // optional int32 n_cores = 4;
  if (has_n_cores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->n_cores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4PetscSolverConfig)
  return target;
}

int E4PetscSolverConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double atol = 1;
    if (has_atol()) {
      total_size += 1 + 8;
    }

    // optional double rtol = 2;
    if (has_rtol()) {
      total_size += 1 + 8;
    }

    // optional double init_step = 3;
    if (has_init_step()) {
      total_size += 1 + 8;
    }

    // optional int32 n_cores = 4;
    if (has_n_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_cores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4PetscSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4PetscSolverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4PetscSolverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4PetscSolverConfig::MergeFrom(const E4PetscSolverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atol()) {
      set_atol(from.atol());
    }
    if (from.has_rtol()) {
      set_rtol(from.rtol());
    }
    if (from.has_init_step()) {
      set_init_step(from.init_step());
    }
    if (from.has_n_cores()) {
      set_n_cores(from.n_cores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4PetscSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4PetscSolverConfig::CopyFrom(const E4PetscSolverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4PetscSolverConfig::IsInitialized() const {

  return true;
}

void E4PetscSolverConfig::Swap(E4PetscSolverConfig* other) {
  if (other != this) {
    std::swap(atol_, other->atol_);
    std::swap(rtol_, other->rtol_);
    std::swap(init_step_, other->init_step_);
    std::swap(n_cores_, other->n_cores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4PetscSolverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4PetscSolverConfig_descriptor_;
  metadata.reflection = E4PetscSolverConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4Model::kPconfigFieldNumber;
const int E4Model::kStateFieldNumber;
const int E4Model::kSconfigFieldNumber;
#endif  // !_MSC_VER

E4Model::E4Model()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4Model)
}

void E4Model::InitAsDefaultInstance() {
  pconfig_ = const_cast< ::pb::E4Config*>(&::pb::E4Config::default_instance());
  state_ = const_cast< ::pb::E4State*>(&::pb::E4State::default_instance());
  sconfig_ = const_cast< ::pb::E4PetscSolverConfig*>(&::pb::E4PetscSolverConfig::default_instance());
}

E4Model::E4Model(const E4Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4Model)
}

void E4Model::SharedCtor() {
  _cached_size_ = 0;
  pconfig_ = NULL;
  state_ = NULL;
  sconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4Model::~E4Model() {
  // @@protoc_insertion_point(destructor:pb.E4Model)
  SharedDtor();
}

void E4Model::SharedDtor() {
  if (this != default_instance_) {
    delete pconfig_;
    delete state_;
    delete sconfig_;
  }
}

void E4Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4Model_descriptor_;
}

const E4Model& E4Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4Model* E4Model::default_instance_ = NULL;

E4Model* E4Model::New() const {
  return new E4Model;
}

void E4Model::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pconfig()) {
      if (pconfig_ != NULL) pconfig_->::pb::E4Config::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E4State::Clear();
    }
    if (has_sconfig()) {
      if (sconfig_ != NULL) sconfig_->::pb::E4PetscSolverConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E4Config pconfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required .pb.E4State state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sconfig;
        break;
      }

      // required .pb.E4PetscSolverConfig sconfig = 3;
      case 3: {
        if (tag == 26) {
         parse_sconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4Model)
  return false;
#undef DO_
}

void E4Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4Model)
  // required .pb.E4Config pconfig = 1;
  if (has_pconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pconfig(), output);
  }

  // required .pb.E4State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  // required .pb.E4PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4Model)
}

::google::protobuf::uint8* E4Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4Model)
  // required .pb.E4Config pconfig = 1;
  if (has_pconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pconfig(), target);
  }

  // required .pb.E4State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  // required .pb.E4PetscSolverConfig sconfig = 3;
  if (has_sconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4Model)
  return target;
}

int E4Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E4Config pconfig = 1;
    if (has_pconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pconfig());
    }

    // required .pb.E4State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // required .pb.E4PetscSolverConfig sconfig = 3;
    if (has_sconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4Model::MergeFrom(const E4Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pconfig()) {
      mutable_pconfig()->::pb::E4Config::MergeFrom(from.pconfig());
    }
    if (from.has_state()) {
      mutable_state()->::pb::E4State::MergeFrom(from.state());
    }
    if (from.has_sconfig()) {
      mutable_sconfig()->::pb::E4PetscSolverConfig::MergeFrom(from.sconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4Model::CopyFrom(const E4Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pconfig()) {
    if (!this->pconfig().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void E4Model::Swap(E4Model* other) {
  if (other != this) {
    std::swap(pconfig_, other->pconfig_);
    std::swap(state_, other->state_);
    std::swap(sconfig_, other->sconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4Model_descriptor_;
  metadata.reflection = E4Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4Solution::kStateFieldNumber;
const int E4Solution::kDStateFieldNumber;
#endif  // !_MSC_VER

E4Solution::E4Solution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4Solution)
}

void E4Solution::InitAsDefaultInstance() {
  state_ = const_cast< ::pb::E4State*>(&::pb::E4State::default_instance());
  d_state_ = const_cast< ::pb::E4State*>(&::pb::E4State::default_instance());
}

E4Solution::E4Solution(const E4Solution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4Solution)
}

void E4Solution::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  d_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4Solution::~E4Solution() {
  // @@protoc_insertion_point(destructor:pb.E4Solution)
  SharedDtor();
}

void E4Solution::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete d_state_;
  }
}

void E4Solution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4Solution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4Solution_descriptor_;
}

const E4Solution& E4Solution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4Solution* E4Solution::default_instance_ = NULL;

E4Solution* E4Solution::New() const {
  return new E4Solution;
}

void E4Solution::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::pb::E4State::Clear();
    }
    if (has_d_state()) {
      if (d_state_ != NULL) d_state_->::pb::E4State::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4Solution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4Solution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E4State state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_d_state;
        break;
      }

      // optional .pb.E4State d_state = 2;
      case 2: {
        if (tag == 18) {
         parse_d_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4Solution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4Solution)
  return false;
#undef DO_
}

void E4Solution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4Solution)
  // required .pb.E4State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .pb.E4State d_state = 2;
  if (has_d_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->d_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4Solution)
}

::google::protobuf::uint8* E4Solution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4Solution)
  // required .pb.E4State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .pb.E4State d_state = 2;
  if (has_d_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->d_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4Solution)
  return target;
}

int E4Solution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E4State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .pb.E4State d_state = 2;
    if (has_d_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4Solution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4Solution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4Solution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4Solution::MergeFrom(const E4Solution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::pb::E4State::MergeFrom(from.state());
    }
    if (from.has_d_state()) {
      mutable_d_state()->::pb::E4State::MergeFrom(from.d_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4Solution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4Solution::CopyFrom(const E4Solution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4Solution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_d_state()) {
    if (!this->d_state().IsInitialized()) return false;
  }
  return true;
}

void E4Solution::Swap(E4Solution* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(d_state_, other->d_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4Solution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4Solution_descriptor_;
  metadata.reflection = E4Solution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E4Special_Hist::kXFieldNumber;
const int E4Special_Hist::kYFieldNumber;
#endif  // !_MSC_VER

E4Special_Hist::E4Special_Hist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4Special.Hist)
}

void E4Special_Hist::InitAsDefaultInstance() {
}

E4Special_Hist::E4Special_Hist(const E4Special_Hist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4Special.Hist)
}

void E4Special_Hist::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4Special_Hist::~E4Special_Hist() {
  // @@protoc_insertion_point(destructor:pb.E4Special.Hist)
  SharedDtor();
}

void E4Special_Hist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4Special_Hist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4Special_Hist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4Special_Hist_descriptor_;
}

const E4Special_Hist& E4Special_Hist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4Special_Hist* E4Special_Hist::default_instance_ = NULL;

E4Special_Hist* E4Special_Hist::New() const {
  return new E4Special_Hist;
}

void E4Special_Hist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4Special_Hist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4Special_Hist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4Special.Hist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 14;
      case 14: {
        if (tag == 113) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_y;
        break;
      }

      // required double y = 15;
      case 15: {
        if (tag == 121) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4Special.Hist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4Special.Hist)
  return false;
#undef DO_
}

void E4Special_Hist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4Special.Hist)
  // required double x = 14;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->x(), output);
  }

  // required double y = 15;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4Special.Hist)
}

::google::protobuf::uint8* E4Special_Hist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4Special.Hist)
  // required double x = 14;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->x(), target);
  }

  // required double y = 15;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4Special.Hist)
  return target;
}

int E4Special_Hist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 14;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 15;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4Special_Hist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4Special_Hist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4Special_Hist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4Special_Hist::MergeFrom(const E4Special_Hist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4Special_Hist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4Special_Hist::CopyFrom(const E4Special_Hist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4Special_Hist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void E4Special_Hist::Swap(E4Special_Hist* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4Special_Hist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4Special_Hist_descriptor_;
  metadata.reflection = E4Special_Hist_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int E4Special::kE2FieldNumber;
const int E4Special::kAverA2FieldNumber;
const int E4Special::kIntEAFieldNumber;
const int E4Special::kNaFieldNumber;
const int E4Special::kNbFieldNumber;
const int E4Special::kMFieldNumber;
const int E4Special::kNFieldNumber;
const int E4Special::kIaFieldNumber;
const int E4Special::kIbFieldNumber;
const int E4Special::kIaAverFieldNumber;
const int E4Special::kIbAverFieldNumber;
const int E4Special::kWaFieldNumber;
const int E4Special::kWbFieldNumber;
const int E4Special::kHistFieldNumber;
#endif  // !_MSC_VER

E4Special::E4Special()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.E4Special)
}

void E4Special::InitAsDefaultInstance() {
}

E4Special::E4Special(const E4Special& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.E4Special)
}

void E4Special::SharedCtor() {
  _cached_size_ = 0;
  e_2_ = 0;
  aver_a_2_ = 0;
  int_e_a_ = 0;
  na_ = 0;
  nb_ = 0;
  m_ = 0;
  n_ = 0;
  ia_ = 0;
  ib_ = 0;
  ia_aver_ = 0;
  ib_aver_ = 0;
  wa_ = 0;
  wb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E4Special::~E4Special() {
  // @@protoc_insertion_point(destructor:pb.E4Special)
  SharedDtor();
}

void E4Special::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E4Special::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E4Special::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E4Special_descriptor_;
}

const E4Special& E4Special::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_5fe4_2eproto();
  return *default_instance_;
}

E4Special* E4Special::default_instance_ = NULL;

E4Special* E4Special::New() const {
  return new E4Special;
}

void E4Special::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<E4Special*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(e_2_, ia_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(ib_, wb_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E4Special::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.E4Special)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double e_2 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_2_)));
          set_has_e_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_aver_a_2;
        break;
      }

      // optional double aver_a_2 = 2;
      case 2: {
        if (tag == 17) {
         parse_aver_a_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aver_a_2_)));
          set_has_aver_a_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_int_e_a;
        break;
      }

      // optional double int_e_a = 4;
      case 4: {
        if (tag == 33) {
         parse_int_e_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &int_e_a_)));
          set_has_int_e_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Na;
        break;
      }

      // optional double Na = 5;
      case 5: {
        if (tag == 41) {
         parse_Na:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &na_)));
          set_has_na();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Nb;
        break;
      }

      // optional double Nb = 6;
      case 6: {
        if (tag == 49) {
         parse_Nb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nb_)));
          set_has_nb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Ia;
        break;
      }

      // optional double Ia = 7;
      case 7: {
        if (tag == 57) {
         parse_Ia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ia_)));
          set_has_ia();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Ib;
        break;
      }

      // optional double Ib = 8;
      case 8: {
        if (tag == 65) {
         parse_Ib:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ib_)));
          set_has_ib();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_Ia_aver;
        break;
      }

      // optional double Ia_aver = 9;
      case 9: {
        if (tag == 73) {
         parse_Ia_aver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ia_aver_)));
          set_has_ia_aver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Ib_aver;
        break;
      }

      // optional double Ib_aver = 10;
      case 10: {
        if (tag == 81) {
         parse_Ib_aver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ib_aver_)));
          set_has_ib_aver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Wa;
        break;
      }

      // optional double Wa = 11;
      case 11: {
        if (tag == 89) {
         parse_Wa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wa_)));
          set_has_wa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Wb;
        break;
      }

      // optional double Wb = 12;
      case 12: {
        if (tag == 97) {
         parse_Wb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wb_)));
          set_has_wb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(107)) goto parse_hist;
        break;
      }

      // repeated group Hist = 13 {
      case 13: {
        if (tag == 107) {
         parse_hist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                13, input, add_hist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(107)) goto parse_hist;
        if (input->ExpectTag(137)) goto parse_M;
        break;
      }

      // optional double M = 17;
      case 17: {
        if (tag == 137) {
         parse_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_N;
        break;
      }

      // optional double N = 18;
      case 18: {
        if (tag == 145) {
         parse_N:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.E4Special)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.E4Special)
  return false;
#undef DO_
}

void E4Special::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.E4Special)
  // optional double e_2 = 1;
  if (has_e_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e_2(), output);
  }

  // optional double aver_a_2 = 2;
  if (has_aver_a_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->aver_a_2(), output);
  }

  // optional double int_e_a = 4;
  if (has_int_e_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->int_e_a(), output);
  }

  // optional double Na = 5;
  if (has_na()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->na(), output);
  }

  // optional double Nb = 6;
  if (has_nb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->nb(), output);
  }

  // optional double Ia = 7;
  if (has_ia()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ia(), output);
  }

  // optional double Ib = 8;
  if (has_ib()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ib(), output);
  }

  // optional double Ia_aver = 9;
  if (has_ia_aver()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ia_aver(), output);
  }

  // optional double Ib_aver = 10;
  if (has_ib_aver()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ib_aver(), output);
  }

  // optional double Wa = 11;
  if (has_wa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->wa(), output);
  }

  // optional double Wb = 12;
  if (has_wb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wb(), output);
  }

  // repeated group Hist = 13 {
  for (int i = 0; i < this->hist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      13, this->hist(i), output);
  }

  // optional double M = 17;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m(), output);
  }

  // optional double N = 18;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->n(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.E4Special)
}

::google::protobuf::uint8* E4Special::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.E4Special)
  // optional double e_2 = 1;
  if (has_e_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e_2(), target);
  }

  // optional double aver_a_2 = 2;
  if (has_aver_a_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->aver_a_2(), target);
  }

  // optional double int_e_a = 4;
  if (has_int_e_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->int_e_a(), target);
  }

  // optional double Na = 5;
  if (has_na()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->na(), target);
  }

  // optional double Nb = 6;
  if (has_nb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->nb(), target);
  }

  // optional double Ia = 7;
  if (has_ia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ia(), target);
  }

  // optional double Ib = 8;
  if (has_ib()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ib(), target);
  }

  // optional double Ia_aver = 9;
  if (has_ia_aver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ia_aver(), target);
  }

  // optional double Ib_aver = 10;
  if (has_ib_aver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ib_aver(), target);
  }

  // optional double Wa = 11;
  if (has_wa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->wa(), target);
  }

  // optional double Wb = 12;
  if (has_wb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wb(), target);
  }

  // repeated group Hist = 13 {
  for (int i = 0; i < this->hist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        13, this->hist(i), target);
  }

  // optional double M = 17;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m(), target);
  }

  // optional double N = 18;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->n(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.E4Special)
  return target;
}

int E4Special::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double e_2 = 1;
    if (has_e_2()) {
      total_size += 1 + 8;
    }

    // optional double aver_a_2 = 2;
    if (has_aver_a_2()) {
      total_size += 1 + 8;
    }

    // optional double int_e_a = 4;
    if (has_int_e_a()) {
      total_size += 1 + 8;
    }

    // optional double Na = 5;
    if (has_na()) {
      total_size += 1 + 8;
    }

    // optional double Nb = 6;
    if (has_nb()) {
      total_size += 1 + 8;
    }

    // optional double M = 17;
    if (has_m()) {
      total_size += 2 + 8;
    }

    // optional double N = 18;
    if (has_n()) {
      total_size += 2 + 8;
    }

    // optional double Ia = 7;
    if (has_ia()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Ib = 8;
    if (has_ib()) {
      total_size += 1 + 8;
    }

    // optional double Ia_aver = 9;
    if (has_ia_aver()) {
      total_size += 1 + 8;
    }

    // optional double Ib_aver = 10;
    if (has_ib_aver()) {
      total_size += 1 + 8;
    }

    // optional double Wa = 11;
    if (has_wa()) {
      total_size += 1 + 8;
    }

    // optional double Wb = 12;
    if (has_wb()) {
      total_size += 1 + 8;
    }

  }
  // repeated group Hist = 13 {
  total_size += 2 * this->hist_size();
  for (int i = 0; i < this->hist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->hist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E4Special::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E4Special* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E4Special*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E4Special::MergeFrom(const E4Special& from) {
  GOOGLE_CHECK_NE(&from, this);
  hist_.MergeFrom(from.hist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e_2()) {
      set_e_2(from.e_2());
    }
    if (from.has_aver_a_2()) {
      set_aver_a_2(from.aver_a_2());
    }
    if (from.has_int_e_a()) {
      set_int_e_a(from.int_e_a());
    }
    if (from.has_na()) {
      set_na(from.na());
    }
    if (from.has_nb()) {
      set_nb(from.nb());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ia()) {
      set_ia(from.ia());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ib()) {
      set_ib(from.ib());
    }
    if (from.has_ia_aver()) {
      set_ia_aver(from.ia_aver());
    }
    if (from.has_ib_aver()) {
      set_ib_aver(from.ib_aver());
    }
    if (from.has_wa()) {
      set_wa(from.wa());
    }
    if (from.has_wb()) {
      set_wb(from.wb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E4Special::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E4Special::CopyFrom(const E4Special& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E4Special::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->hist())) return false;
  return true;
}

void E4Special::Swap(E4Special* other) {
  if (other != this) {
    std::swap(e_2_, other->e_2_);
    std::swap(aver_a_2_, other->aver_a_2_);
    std::swap(int_e_a_, other->int_e_a_);
    std::swap(na_, other->na_);
    std::swap(nb_, other->nb_);
    std::swap(m_, other->m_);
    std::swap(n_, other->n_);
    std::swap(ia_, other->ia_);
    std::swap(ib_, other->ib_);
    std::swap(ia_aver_, other->ia_aver_);
    std::swap(ib_aver_, other->ib_aver_);
    std::swap(wa_, other->wa_);
    std::swap(wb_, other->wb_);
    hist_.Swap(&other->hist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E4Special::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E4Special_descriptor_;
  metadata.reflection = E4Special_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
